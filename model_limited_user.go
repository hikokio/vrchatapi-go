/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// LimitedUser 
type LimitedUser struct {
	Bio *string `json:"bio,omitempty"`
	// When profilePicOverride is not empty, use it instead.
	CurrentAvatarImageUrl string `json:"currentAvatarImageUrl"`
	// When profilePicOverride is not empty, use it instead.
	CurrentAvatarThumbnailImageUrl string `json:"currentAvatarThumbnailImageUrl"`
	DeveloperType DeveloperType `json:"developerType"`
	DisplayName string `json:"displayName"`
	FallbackAvatar string `json:"fallbackAvatar"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	Id string `json:"id"`
	IsFriend bool `json:"isFriend"`
	// This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
	LastPlatform string `json:"last_platform"`
	ProfilePicOverride string `json:"profilePicOverride"`
	Status UserStatus `json:"status"`
	StatusDescription string `json:"statusDescription"`
	// <- Always empty.
	Tags []string `json:"tags"`
	UserIcon string `json:"userIcon"`
	// -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
	// Deprecated
	Username *string `json:"username,omitempty"`
	Location *string `json:"location,omitempty"`
	FriendKey *string `json:"friendKey,omitempty"`
}

// NewLimitedUser instantiates a new LimitedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitedUser(currentAvatarImageUrl string, currentAvatarThumbnailImageUrl string, developerType DeveloperType, displayName string, fallbackAvatar string, id string, isFriend bool, lastPlatform string, profilePicOverride string, status UserStatus, statusDescription string, tags []string, userIcon string) *LimitedUser {
	this := LimitedUser{}
	this.CurrentAvatarImageUrl = currentAvatarImageUrl
	this.CurrentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl
	this.DeveloperType = developerType
	this.DisplayName = displayName
	this.FallbackAvatar = fallbackAvatar
	this.Id = id
	this.IsFriend = isFriend
	this.LastPlatform = lastPlatform
	this.ProfilePicOverride = profilePicOverride
	this.Status = status
	this.StatusDescription = statusDescription
	this.Tags = tags
	this.UserIcon = userIcon
	return &this
}

// NewLimitedUserWithDefaults instantiates a new LimitedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitedUserWithDefaults() *LimitedUser {
	this := LimitedUser{}
	var developerType DeveloperType = DEVELOPERTYPE_NONE
	this.DeveloperType = developerType
	var status UserStatus = USERSTATUS_OFFLINE
	this.Status = status
	return &this
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *LimitedUser) GetBio() string {
	if o == nil || isNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetBioOk() (*string, bool) {
	if o == nil || isNil(o.Bio) {
    return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *LimitedUser) HasBio() bool {
	if o != nil && !isNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *LimitedUser) SetBio(v string) {
	o.Bio = &v
}

// GetCurrentAvatarImageUrl returns the CurrentAvatarImageUrl field value
func (o *LimitedUser) GetCurrentAvatarImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatarImageUrl
}

// GetCurrentAvatarImageUrlOk returns a tuple with the CurrentAvatarImageUrl field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetCurrentAvatarImageUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatarImageUrl, true
}

// SetCurrentAvatarImageUrl sets field value
func (o *LimitedUser) SetCurrentAvatarImageUrl(v string) {
	o.CurrentAvatarImageUrl = v
}

// GetCurrentAvatarThumbnailImageUrl returns the CurrentAvatarThumbnailImageUrl field value
func (o *LimitedUser) GetCurrentAvatarThumbnailImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatarThumbnailImageUrl
}

// GetCurrentAvatarThumbnailImageUrlOk returns a tuple with the CurrentAvatarThumbnailImageUrl field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetCurrentAvatarThumbnailImageUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatarThumbnailImageUrl, true
}

// SetCurrentAvatarThumbnailImageUrl sets field value
func (o *LimitedUser) SetCurrentAvatarThumbnailImageUrl(v string) {
	o.CurrentAvatarThumbnailImageUrl = v
}

// GetDeveloperType returns the DeveloperType field value
func (o *LimitedUser) GetDeveloperType() DeveloperType {
	if o == nil {
		var ret DeveloperType
		return ret
	}

	return o.DeveloperType
}

// GetDeveloperTypeOk returns a tuple with the DeveloperType field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetDeveloperTypeOk() (*DeveloperType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeveloperType, true
}

// SetDeveloperType sets field value
func (o *LimitedUser) SetDeveloperType(v DeveloperType) {
	o.DeveloperType = v
}

// GetDisplayName returns the DisplayName field value
func (o *LimitedUser) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *LimitedUser) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetFallbackAvatar returns the FallbackAvatar field value
func (o *LimitedUser) GetFallbackAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FallbackAvatar
}

// GetFallbackAvatarOk returns a tuple with the FallbackAvatar field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetFallbackAvatarOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FallbackAvatar, true
}

// SetFallbackAvatar sets field value
func (o *LimitedUser) SetFallbackAvatar(v string) {
	o.FallbackAvatar = v
}

// GetId returns the Id field value
func (o *LimitedUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LimitedUser) SetId(v string) {
	o.Id = v
}

// GetIsFriend returns the IsFriend field value
func (o *LimitedUser) GetIsFriend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFriend
}

// GetIsFriendOk returns a tuple with the IsFriend field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetIsFriendOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsFriend, true
}

// SetIsFriend sets field value
func (o *LimitedUser) SetIsFriend(v bool) {
	o.IsFriend = v
}

// GetLastPlatform returns the LastPlatform field value
func (o *LimitedUser) GetLastPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastPlatform
}

// GetLastPlatformOk returns a tuple with the LastPlatform field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetLastPlatformOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastPlatform, true
}

// SetLastPlatform sets field value
func (o *LimitedUser) SetLastPlatform(v string) {
	o.LastPlatform = v
}

// GetProfilePicOverride returns the ProfilePicOverride field value
func (o *LimitedUser) GetProfilePicOverride() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfilePicOverride
}

// GetProfilePicOverrideOk returns a tuple with the ProfilePicOverride field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetProfilePicOverrideOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProfilePicOverride, true
}

// SetProfilePicOverride sets field value
func (o *LimitedUser) SetProfilePicOverride(v string) {
	o.ProfilePicOverride = v
}

// GetStatus returns the Status field value
func (o *LimitedUser) GetStatus() UserStatus {
	if o == nil {
		var ret UserStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetStatusOk() (*UserStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LimitedUser) SetStatus(v UserStatus) {
	o.Status = v
}

// GetStatusDescription returns the StatusDescription field value
func (o *LimitedUser) GetStatusDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetStatusDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StatusDescription, true
}

// SetStatusDescription sets field value
func (o *LimitedUser) SetStatusDescription(v string) {
	o.StatusDescription = v
}

// GetTags returns the Tags field value
func (o *LimitedUser) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *LimitedUser) SetTags(v []string) {
	o.Tags = v
}

// GetUserIcon returns the UserIcon field value
func (o *LimitedUser) GetUserIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserIcon
}

// GetUserIconOk returns a tuple with the UserIcon field value
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetUserIconOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UserIcon, true
}

// SetUserIcon sets field value
func (o *LimitedUser) SetUserIcon(v string) {
	o.UserIcon = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
// Deprecated
func (o *LimitedUser) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *LimitedUser) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *LimitedUser) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
// Deprecated
func (o *LimitedUser) SetUsername(v string) {
	o.Username = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *LimitedUser) GetLocation() string {
	if o == nil || isNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetLocationOk() (*string, bool) {
	if o == nil || isNil(o.Location) {
    return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *LimitedUser) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *LimitedUser) SetLocation(v string) {
	o.Location = &v
}

// GetFriendKey returns the FriendKey field value if set, zero value otherwise.
func (o *LimitedUser) GetFriendKey() string {
	if o == nil || isNil(o.FriendKey) {
		var ret string
		return ret
	}
	return *o.FriendKey
}

// GetFriendKeyOk returns a tuple with the FriendKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitedUser) GetFriendKeyOk() (*string, bool) {
	if o == nil || isNil(o.FriendKey) {
    return nil, false
	}
	return o.FriendKey, true
}

// HasFriendKey returns a boolean if a field has been set.
func (o *LimitedUser) HasFriendKey() bool {
	if o != nil && !isNil(o.FriendKey) {
		return true
	}

	return false
}

// SetFriendKey gets a reference to the given string and assigns it to the FriendKey field.
func (o *LimitedUser) SetFriendKey(v string) {
	o.FriendKey = &v
}

func (o LimitedUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if true {
		toSerialize["currentAvatarImageUrl"] = o.CurrentAvatarImageUrl
	}
	if true {
		toSerialize["currentAvatarThumbnailImageUrl"] = o.CurrentAvatarThumbnailImageUrl
	}
	if true {
		toSerialize["developerType"] = o.DeveloperType
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["fallbackAvatar"] = o.FallbackAvatar
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["isFriend"] = o.IsFriend
	}
	if true {
		toSerialize["last_platform"] = o.LastPlatform
	}
	if true {
		toSerialize["profilePicOverride"] = o.ProfilePicOverride
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["userIcon"] = o.UserIcon
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.FriendKey) {
		toSerialize["friendKey"] = o.FriendKey
	}
	return json.Marshal(toSerialize)
}

type NullableLimitedUser struct {
	value *LimitedUser
	isSet bool
}

func (v NullableLimitedUser) Get() *LimitedUser {
	return v.value
}

func (v *NullableLimitedUser) Set(val *LimitedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitedUser(val *LimitedUser) *NullableLimitedUser {
	return &NullableLimitedUser{value: val, isSet: true}
}

func (v NullableLimitedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


