/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// UserState * \"online\" User is online in VRChat * \"active\" User is online, but not in VRChat * \"offline\" User is offline  Always offline when returned through `getCurrentUser` (/auth/user).
type UserState string

// List of UserState
const (
	USERSTATE_OFFLINE UserState = "offline"
	USERSTATE_ACTIVE UserState = "active"
	USERSTATE_ONLINE UserState = "online"
)

// All allowed values of UserState enum
var AllowedUserStateEnumValues = []UserState{
	"offline",
	"active",
	"online",
}

func (v *UserState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserState(value)
	for _, existing := range AllowedUserStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserState", value)
}

// NewUserStateFromValue returns a pointer to a valid UserState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserStateFromValue(v string) (*UserState, error) {
	ev := UserState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserState: valid values are %v", v, AllowedUserStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserState) IsValid() bool {
	for _, existing := range AllowedUserStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserState value
func (v UserState) Ptr() *UserState {
	return &v
}

type NullableUserState struct {
	value *UserState
	isSet bool
}

func (v NullableUserState) Get() *UserState {
	return v.value
}

func (v *NullableUserState) Set(val *UserState) {
	v.value = val
	v.isSet = true
}

func (v NullableUserState) IsSet() bool {
	return v.isSet
}

func (v *NullableUserState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserState(val *UserState) *NullableUserState {
	return &NullableUserState{value: val, isSet: true}
}

func (v NullableUserState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

