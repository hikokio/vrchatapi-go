/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// GroupJoinState the model 'GroupJoinState'
type GroupJoinState string

// List of GroupJoinState
const (
	GROUPJOINSTATE_CLOSED GroupJoinState = "closed"
	GROUPJOINSTATE_INVITE GroupJoinState = "invite"
	GROUPJOINSTATE_REQUEST GroupJoinState = "request"
	GROUPJOINSTATE_OPEN GroupJoinState = "open"
)

// All allowed values of GroupJoinState enum
var AllowedGroupJoinStateEnumValues = []GroupJoinState{
	"closed",
	"invite",
	"request",
	"open",
}

func (v *GroupJoinState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupJoinState(value)
	for _, existing := range AllowedGroupJoinStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupJoinState", value)
}

// NewGroupJoinStateFromValue returns a pointer to a valid GroupJoinState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupJoinStateFromValue(v string) (*GroupJoinState, error) {
	ev := GroupJoinState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupJoinState: valid values are %v", v, AllowedGroupJoinStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupJoinState) IsValid() bool {
	for _, existing := range AllowedGroupJoinStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupJoinState value
func (v GroupJoinState) Ptr() *GroupJoinState {
	return &v
}

type NullableGroupJoinState struct {
	value *GroupJoinState
	isSet bool
}

func (v NullableGroupJoinState) Get() *GroupJoinState {
	return v.value
}

func (v *NullableGroupJoinState) Set(val *GroupJoinState) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupJoinState) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupJoinState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupJoinState(val *GroupJoinState) *NullableGroupJoinState {
	return &NullableGroupJoinState{value: val, isSet: true}
}

func (v NullableGroupJoinState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupJoinState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

