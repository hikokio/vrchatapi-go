/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// Favorite 
type Favorite struct {
	// MUST be either AvatarID, UserID or WorldID.
	FavoriteId string `json:"favoriteId"`
	Id string `json:"id"`
	//  
	Tags []string `json:"tags"`
	Type FavoriteType `json:"type"`
}

// NewFavorite instantiates a new Favorite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavorite(favoriteId string, id string, tags []string, type_ FavoriteType) *Favorite {
	this := Favorite{}
	this.FavoriteId = favoriteId
	this.Id = id
	this.Tags = tags
	this.Type = type_
	return &this
}

// NewFavoriteWithDefaults instantiates a new Favorite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteWithDefaults() *Favorite {
	this := Favorite{}
	var type_ FavoriteType = FAVORITETYPE_FRIEND
	this.Type = type_
	return &this
}

// GetFavoriteId returns the FavoriteId field value
func (o *Favorite) GetFavoriteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FavoriteId
}

// GetFavoriteIdOk returns a tuple with the FavoriteId field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetFavoriteIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FavoriteId, true
}

// SetFavoriteId sets field value
func (o *Favorite) SetFavoriteId(v string) {
	o.FavoriteId = v
}

// GetId returns the Id field value
func (o *Favorite) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Favorite) SetId(v string) {
	o.Id = v
}

// GetTags returns the Tags field value
func (o *Favorite) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Favorite) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *Favorite) GetType() FavoriteType {
	if o == nil {
		var ret FavoriteType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetTypeOk() (*FavoriteType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Favorite) SetType(v FavoriteType) {
	o.Type = v
}

func (o Favorite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["favoriteId"] = o.FavoriteId
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFavorite struct {
	value *Favorite
	isSet bool
}

func (v NullableFavorite) Get() *Favorite {
	return v.value
}

func (v *NullableFavorite) Set(val *Favorite) {
	v.value = val
	v.isSet = true
}

func (v NullableFavorite) IsSet() bool {
	return v.isSet
}

func (v *NullableFavorite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavorite(val *Favorite) *NullableFavorite {
	return &NullableFavorite{value: val, isSet: true}
}

func (v NullableFavorite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavorite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


