/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// File 
type File struct {
	Extension string `json:"extension"`
	Id string `json:"id"`
	MimeType MIMEType `json:"mimeType"`
	// 
	Name string `json:"name"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	OwnerId string `json:"ownerId"`
	//  
	Tags []string `json:"tags"`
	//  
	Versions []FileVersion `json:"versions"`
}

// NewFile instantiates a new File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFile(extension string, id string, mimeType MIMEType, name string, ownerId string, tags []string, versions []FileVersion) *File {
	this := File{}
	this.Extension = extension
	this.Id = id
	this.MimeType = mimeType
	this.Name = name
	this.OwnerId = ownerId
	this.Tags = tags
	this.Versions = versions
	return &this
}

// NewFileWithDefaults instantiates a new File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileWithDefaults() *File {
	this := File{}
	var mimeType MIMEType = MIMETYPE_IMAGE_JPEG
	this.MimeType = mimeType
	return &this
}

// GetExtension returns the Extension field value
func (o *File) GetExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *File) GetExtensionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *File) SetExtension(v string) {
	o.Extension = v
}

// GetId returns the Id field value
func (o *File) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *File) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *File) SetId(v string) {
	o.Id = v
}

// GetMimeType returns the MimeType field value
func (o *File) GetMimeType() MIMEType {
	if o == nil {
		var ret MIMEType
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *File) GetMimeTypeOk() (*MIMEType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *File) SetMimeType(v MIMEType) {
	o.MimeType = v
}

// GetName returns the Name field value
func (o *File) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *File) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *File) SetName(v string) {
	o.Name = v
}

// GetOwnerId returns the OwnerId field value
func (o *File) GetOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value
// and a boolean to check if the value has been set.
func (o *File) GetOwnerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OwnerId, true
}

// SetOwnerId sets field value
func (o *File) SetOwnerId(v string) {
	o.OwnerId = v
}

// GetTags returns the Tags field value
func (o *File) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *File) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *File) SetTags(v []string) {
	o.Tags = v
}

// GetVersions returns the Versions field value
func (o *File) GetVersions() []FileVersion {
	if o == nil {
		var ret []FileVersion
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *File) GetVersionsOk() ([]FileVersion, bool) {
	if o == nil {
    return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *File) SetVersions(v []FileVersion) {
	o.Versions = v
}

func (o File) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["extension"] = o.Extension
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["mimeType"] = o.MimeType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["ownerId"] = o.OwnerId
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


