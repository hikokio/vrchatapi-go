/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// License struct for License
type License struct {
	// Either a AvatarID, LicenseGroupID, PermissionID or ProductID. This depends on the `forType` field.
	ForId string `json:"forId"`
	ForType LicenseType `json:"forType"`
	ForName string `json:"forName"`
	ForAction LicenseAction `json:"forAction"`
}

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense(forId string, forType LicenseType, forName string, forAction LicenseAction) *License {
	this := License{}
	this.ForId = forId
	this.ForType = forType
	this.ForName = forName
	this.ForAction = forAction
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	var forType LicenseType = LICENSETYPE_PERMISSION
	this.ForType = forType
	var forAction LicenseAction = LICENSEACTION_HAVE
	this.ForAction = forAction
	return &this
}

// GetForId returns the ForId field value
func (o *License) GetForId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForId
}

// GetForIdOk returns a tuple with the ForId field value
// and a boolean to check if the value has been set.
func (o *License) GetForIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ForId, true
}

// SetForId sets field value
func (o *License) SetForId(v string) {
	o.ForId = v
}

// GetForType returns the ForType field value
func (o *License) GetForType() LicenseType {
	if o == nil {
		var ret LicenseType
		return ret
	}

	return o.ForType
}

// GetForTypeOk returns a tuple with the ForType field value
// and a boolean to check if the value has been set.
func (o *License) GetForTypeOk() (*LicenseType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ForType, true
}

// SetForType sets field value
func (o *License) SetForType(v LicenseType) {
	o.ForType = v
}

// GetForName returns the ForName field value
func (o *License) GetForName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForName
}

// GetForNameOk returns a tuple with the ForName field value
// and a boolean to check if the value has been set.
func (o *License) GetForNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ForName, true
}

// SetForName sets field value
func (o *License) SetForName(v string) {
	o.ForName = v
}

// GetForAction returns the ForAction field value
func (o *License) GetForAction() LicenseAction {
	if o == nil {
		var ret LicenseAction
		return ret
	}

	return o.ForAction
}

// GetForActionOk returns a tuple with the ForAction field value
// and a boolean to check if the value has been set.
func (o *License) GetForActionOk() (*LicenseAction, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ForAction, true
}

// SetForAction sets field value
func (o *License) SetForAction(v LicenseAction) {
	o.ForAction = v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["forId"] = o.ForId
	}
	if true {
		toSerialize["forType"] = o.ForType
	}
	if true {
		toSerialize["forName"] = o.ForName
	}
	if true {
		toSerialize["forAction"] = o.ForAction
	}
	return json.Marshal(toSerialize)
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


