/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// InviteMessageType 
type InviteMessageType string

// List of InviteMessageType
const (
	INVITEMESSAGETYPE_MESSAGE InviteMessageType = "message"
	INVITEMESSAGETYPE_RESPONSE InviteMessageType = "response"
	INVITEMESSAGETYPE_REQUEST InviteMessageType = "request"
	INVITEMESSAGETYPE_REQUEST_RESPONSE InviteMessageType = "requestResponse"
)

// All allowed values of InviteMessageType enum
var AllowedInviteMessageTypeEnumValues = []InviteMessageType{
	"message",
	"response",
	"request",
	"requestResponse",
}

func (v *InviteMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InviteMessageType(value)
	for _, existing := range AllowedInviteMessageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InviteMessageType", value)
}

// NewInviteMessageTypeFromValue returns a pointer to a valid InviteMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInviteMessageTypeFromValue(v string) (*InviteMessageType, error) {
	ev := InviteMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InviteMessageType: valid values are %v", v, AllowedInviteMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InviteMessageType) IsValid() bool {
	for _, existing := range AllowedInviteMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InviteMessageType value
func (v InviteMessageType) Ptr() *InviteMessageType {
	return &v
}

type NullableInviteMessageType struct {
	value *InviteMessageType
	isSet bool
}

func (v NullableInviteMessageType) Get() *InviteMessageType {
	return v.value
}

func (v *NullableInviteMessageType) Set(val *InviteMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteMessageType(val *InviteMessageType) *NullableInviteMessageType {
	return &NullableInviteMessageType{value: val, isSet: true}
}

func (v NullableInviteMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

