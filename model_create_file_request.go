/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// CreateFileRequest struct for CreateFileRequest
type CreateFileRequest struct {
	Name string `json:"name"`
	MimeType MIMEType `json:"mimeType"`
	Extension string `json:"extension"`
	//  
	Tags []string `json:"tags,omitempty"`
}

// NewCreateFileRequest instantiates a new CreateFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFileRequest(name string, mimeType MIMEType, extension string) *CreateFileRequest {
	this := CreateFileRequest{}
	this.Name = name
	this.MimeType = mimeType
	this.Extension = extension
	return &this
}

// NewCreateFileRequestWithDefaults instantiates a new CreateFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFileRequestWithDefaults() *CreateFileRequest {
	this := CreateFileRequest{}
	var mimeType MIMEType = MIMETYPE_IMAGE_JPEG
	this.MimeType = mimeType
	return &this
}

// GetName returns the Name field value
func (o *CreateFileRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateFileRequest) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateFileRequest) SetName(v string) {
	o.Name = v
}

// GetMimeType returns the MimeType field value
func (o *CreateFileRequest) GetMimeType() MIMEType {
	if o == nil {
		var ret MIMEType
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *CreateFileRequest) GetMimeTypeOk() (*MIMEType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *CreateFileRequest) SetMimeType(v MIMEType) {
	o.MimeType = v
}

// GetExtension returns the Extension field value
func (o *CreateFileRequest) GetExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *CreateFileRequest) GetExtensionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *CreateFileRequest) SetExtension(v string) {
	o.Extension = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateFileRequest) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileRequest) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateFileRequest) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateFileRequest) SetTags(v []string) {
	o.Tags = v
}

func (o CreateFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["mimeType"] = o.MimeType
	}
	if true {
		toSerialize["extension"] = o.Extension
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableCreateFileRequest struct {
	value *CreateFileRequest
	isSet bool
}

func (v NullableCreateFileRequest) Get() *CreateFileRequest {
	return v.value
}

func (v *NullableCreateFileRequest) Set(val *CreateFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFileRequest(val *CreateFileRequest) *NullableCreateFileRequest {
	return &NullableCreateFileRequest{value: val, isSet: true}
}

func (v NullableCreateFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


