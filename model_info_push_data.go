/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// InfoPushData 
type InfoPushData struct {
	ContentList *DynamicContentRow `json:"contentList,omitempty"`
	Description *string `json:"description,omitempty"`
	ImageUrl *string `json:"imageUrl,omitempty"`
	Name *string `json:"name,omitempty"`
	OnPressed *InfoPushDataClickable `json:"onPressed,omitempty"`
	Template *string `json:"template,omitempty"`
	Version *string `json:"version,omitempty"`
	Article *InfoPushDataArticle `json:"article,omitempty"`
}

// NewInfoPushData instantiates a new InfoPushData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoPushData() *InfoPushData {
	this := InfoPushData{}
	return &this
}

// NewInfoPushDataWithDefaults instantiates a new InfoPushData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoPushDataWithDefaults() *InfoPushData {
	this := InfoPushData{}
	return &this
}

// GetContentList returns the ContentList field value if set, zero value otherwise.
func (o *InfoPushData) GetContentList() DynamicContentRow {
	if o == nil || isNil(o.ContentList) {
		var ret DynamicContentRow
		return ret
	}
	return *o.ContentList
}

// GetContentListOk returns a tuple with the ContentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetContentListOk() (*DynamicContentRow, bool) {
	if o == nil || isNil(o.ContentList) {
    return nil, false
	}
	return o.ContentList, true
}

// HasContentList returns a boolean if a field has been set.
func (o *InfoPushData) HasContentList() bool {
	if o != nil && !isNil(o.ContentList) {
		return true
	}

	return false
}

// SetContentList gets a reference to the given DynamicContentRow and assigns it to the ContentList field.
func (o *InfoPushData) SetContentList(v DynamicContentRow) {
	o.ContentList = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InfoPushData) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InfoPushData) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InfoPushData) SetDescription(v string) {
	o.Description = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *InfoPushData) GetImageUrl() string {
	if o == nil || isNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetImageUrlOk() (*string, bool) {
	if o == nil || isNil(o.ImageUrl) {
    return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *InfoPushData) HasImageUrl() bool {
	if o != nil && !isNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *InfoPushData) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InfoPushData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InfoPushData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InfoPushData) SetName(v string) {
	o.Name = &v
}

// GetOnPressed returns the OnPressed field value if set, zero value otherwise.
func (o *InfoPushData) GetOnPressed() InfoPushDataClickable {
	if o == nil || isNil(o.OnPressed) {
		var ret InfoPushDataClickable
		return ret
	}
	return *o.OnPressed
}

// GetOnPressedOk returns a tuple with the OnPressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetOnPressedOk() (*InfoPushDataClickable, bool) {
	if o == nil || isNil(o.OnPressed) {
    return nil, false
	}
	return o.OnPressed, true
}

// HasOnPressed returns a boolean if a field has been set.
func (o *InfoPushData) HasOnPressed() bool {
	if o != nil && !isNil(o.OnPressed) {
		return true
	}

	return false
}

// SetOnPressed gets a reference to the given InfoPushDataClickable and assigns it to the OnPressed field.
func (o *InfoPushData) SetOnPressed(v InfoPushDataClickable) {
	o.OnPressed = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *InfoPushData) GetTemplate() string {
	if o == nil || isNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetTemplateOk() (*string, bool) {
	if o == nil || isNil(o.Template) {
    return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *InfoPushData) HasTemplate() bool {
	if o != nil && !isNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *InfoPushData) SetTemplate(v string) {
	o.Template = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InfoPushData) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InfoPushData) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InfoPushData) SetVersion(v string) {
	o.Version = &v
}

// GetArticle returns the Article field value if set, zero value otherwise.
func (o *InfoPushData) GetArticle() InfoPushDataArticle {
	if o == nil || isNil(o.Article) {
		var ret InfoPushDataArticle
		return ret
	}
	return *o.Article
}

// GetArticleOk returns a tuple with the Article field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushData) GetArticleOk() (*InfoPushDataArticle, bool) {
	if o == nil || isNil(o.Article) {
    return nil, false
	}
	return o.Article, true
}

// HasArticle returns a boolean if a field has been set.
func (o *InfoPushData) HasArticle() bool {
	if o != nil && !isNil(o.Article) {
		return true
	}

	return false
}

// SetArticle gets a reference to the given InfoPushDataArticle and assigns it to the Article field.
func (o *InfoPushData) SetArticle(v InfoPushDataArticle) {
	o.Article = &v
}

func (o InfoPushData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContentList) {
		toSerialize["contentList"] = o.ContentList
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.OnPressed) {
		toSerialize["onPressed"] = o.OnPressed
	}
	if !isNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.Article) {
		toSerialize["article"] = o.Article
	}
	return json.Marshal(toSerialize)
}

type NullableInfoPushData struct {
	value *InfoPushData
	isSet bool
}

func (v NullableInfoPushData) Get() *InfoPushData {
	return v.value
}

func (v *NullableInfoPushData) Set(val *InfoPushData) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoPushData) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoPushData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoPushData(val *InfoPushData) *NullableInfoPushData {
	return &NullableInfoPushData{value: val, isSet: true}
}

func (v NullableInfoPushData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoPushData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


