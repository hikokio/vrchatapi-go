/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// InviteMessage 
type InviteMessage struct {
	CanBeUpdated bool `json:"canBeUpdated"`
	Id string `json:"id"`
	Message string `json:"message"`
	MessageType InviteMessageType `json:"messageType"`
	// Changes to 60 when updated, although probably server-side configurable.
	RemainingCooldownMinutes int32 `json:"remainingCooldownMinutes"`
	Slot int32 `json:"slot"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// NewInviteMessage instantiates a new InviteMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteMessage(canBeUpdated bool, id string, message string, messageType InviteMessageType, remainingCooldownMinutes int32, slot int32, updatedAt time.Time) *InviteMessage {
	this := InviteMessage{}
	this.CanBeUpdated = canBeUpdated
	this.Id = id
	this.Message = message
	this.MessageType = messageType
	this.RemainingCooldownMinutes = remainingCooldownMinutes
	this.Slot = slot
	this.UpdatedAt = updatedAt
	return &this
}

// NewInviteMessageWithDefaults instantiates a new InviteMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteMessageWithDefaults() *InviteMessage {
	this := InviteMessage{}
	var canBeUpdated bool = true
	this.CanBeUpdated = canBeUpdated
	var messageType InviteMessageType = INVITEMESSAGETYPE_MESSAGE
	this.MessageType = messageType
	var remainingCooldownMinutes int32 = 0
	this.RemainingCooldownMinutes = remainingCooldownMinutes
	return &this
}

// GetCanBeUpdated returns the CanBeUpdated field value
func (o *InviteMessage) GetCanBeUpdated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanBeUpdated
}

// GetCanBeUpdatedOk returns a tuple with the CanBeUpdated field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetCanBeUpdatedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CanBeUpdated, true
}

// SetCanBeUpdated sets field value
func (o *InviteMessage) SetCanBeUpdated(v bool) {
	o.CanBeUpdated = v
}

// GetId returns the Id field value
func (o *InviteMessage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InviteMessage) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *InviteMessage) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *InviteMessage) SetMessage(v string) {
	o.Message = v
}

// GetMessageType returns the MessageType field value
func (o *InviteMessage) GetMessageType() InviteMessageType {
	if o == nil {
		var ret InviteMessageType
		return ret
	}

	return o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetMessageTypeOk() (*InviteMessageType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MessageType, true
}

// SetMessageType sets field value
func (o *InviteMessage) SetMessageType(v InviteMessageType) {
	o.MessageType = v
}

// GetRemainingCooldownMinutes returns the RemainingCooldownMinutes field value
func (o *InviteMessage) GetRemainingCooldownMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemainingCooldownMinutes
}

// GetRemainingCooldownMinutesOk returns a tuple with the RemainingCooldownMinutes field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetRemainingCooldownMinutesOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RemainingCooldownMinutes, true
}

// SetRemainingCooldownMinutes sets field value
func (o *InviteMessage) SetRemainingCooldownMinutes(v int32) {
	o.RemainingCooldownMinutes = v
}

// GetSlot returns the Slot field value
func (o *InviteMessage) GetSlot() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Slot
}

// GetSlotOk returns a tuple with the Slot field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetSlotOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Slot, true
}

// SetSlot sets field value
func (o *InviteMessage) SetSlot(v int32) {
	o.Slot = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *InviteMessage) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *InviteMessage) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *InviteMessage) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o InviteMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["canBeUpdated"] = o.CanBeUpdated
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["messageType"] = o.MessageType
	}
	if true {
		toSerialize["remainingCooldownMinutes"] = o.RemainingCooldownMinutes
	}
	if true {
		toSerialize["slot"] = o.Slot
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableInviteMessage struct {
	value *InviteMessage
	isSet bool
}

func (v NullableInviteMessage) Get() *InviteMessage {
	return v.value
}

func (v *NullableInviteMessage) Set(val *InviteMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteMessage(val *InviteMessage) *NullableInviteMessage {
	return &NullableInviteMessage{value: val, isSet: true}
}

func (v NullableInviteMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


