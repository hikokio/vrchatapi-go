/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// GroupUserVisibility the model 'GroupUserVisibility'
type GroupUserVisibility string

// List of GroupUserVisibility
const (
	GROUPUSERVISIBILITY_VISIBLE GroupUserVisibility = "visible"
	GROUPUSERVISIBILITY_HIDDEN GroupUserVisibility = "hidden"
	GROUPUSERVISIBILITY_FRIENDS GroupUserVisibility = "friends"
)

// All allowed values of GroupUserVisibility enum
var AllowedGroupUserVisibilityEnumValues = []GroupUserVisibility{
	"visible",
	"hidden",
	"friends",
}

func (v *GroupUserVisibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupUserVisibility(value)
	for _, existing := range AllowedGroupUserVisibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupUserVisibility", value)
}

// NewGroupUserVisibilityFromValue returns a pointer to a valid GroupUserVisibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupUserVisibilityFromValue(v string) (*GroupUserVisibility, error) {
	ev := GroupUserVisibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupUserVisibility: valid values are %v", v, AllowedGroupUserVisibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupUserVisibility) IsValid() bool {
	for _, existing := range AllowedGroupUserVisibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupUserVisibility value
func (v GroupUserVisibility) Ptr() *GroupUserVisibility {
	return &v
}

type NullableGroupUserVisibility struct {
	value *GroupUserVisibility
	isSet bool
}

func (v NullableGroupUserVisibility) Get() *GroupUserVisibility {
	return v.value
}

func (v *NullableGroupUserVisibility) Set(val *GroupUserVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUserVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUserVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUserVisibility(val *GroupUserVisibility) *NullableGroupUserVisibility {
	return &NullableGroupUserVisibility{value: val, isSet: true}
}

func (v NullableGroupUserVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUserVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

