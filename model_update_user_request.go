/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// UpdateUserRequest struct for UpdateUserRequest
type UpdateUserRequest struct {
	Email *string `json:"email,omitempty"`
	Birthday *string `json:"birthday,omitempty"`
	AcceptedTOSVersion *float32 `json:"acceptedTOSVersion,omitempty"`
	//  
	Tags []string `json:"tags,omitempty"`
	Status *UserStatus `json:"status,omitempty"`
	StatusDescription *string `json:"statusDescription,omitempty"`
	Bio *string `json:"bio,omitempty"`
	BioLinks []string `json:"bioLinks,omitempty"`
	// MUST be a valid VRChat /file/ url.
	UserIcon *string `json:"userIcon,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest() *UpdateUserRequest {
	this := UpdateUserRequest{}
	var status UserStatus = USERSTATUS_OFFLINE
	this.Status = &status
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	var status UserStatus = USERSTATUS_OFFLINE
	this.Status = &status
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetBirthday() string {
	if o == nil || isNil(o.Birthday) {
		var ret string
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetBirthdayOk() (*string, bool) {
	if o == nil || isNil(o.Birthday) {
    return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasBirthday() bool {
	if o != nil && !isNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given string and assigns it to the Birthday field.
func (o *UpdateUserRequest) SetBirthday(v string) {
	o.Birthday = &v
}

// GetAcceptedTOSVersion returns the AcceptedTOSVersion field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetAcceptedTOSVersion() float32 {
	if o == nil || isNil(o.AcceptedTOSVersion) {
		var ret float32
		return ret
	}
	return *o.AcceptedTOSVersion
}

// GetAcceptedTOSVersionOk returns a tuple with the AcceptedTOSVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetAcceptedTOSVersionOk() (*float32, bool) {
	if o == nil || isNil(o.AcceptedTOSVersion) {
    return nil, false
	}
	return o.AcceptedTOSVersion, true
}

// HasAcceptedTOSVersion returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAcceptedTOSVersion() bool {
	if o != nil && !isNil(o.AcceptedTOSVersion) {
		return true
	}

	return false
}

// SetAcceptedTOSVersion gets a reference to the given float32 and assigns it to the AcceptedTOSVersion field.
func (o *UpdateUserRequest) SetAcceptedTOSVersion(v float32) {
	o.AcceptedTOSVersion = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateUserRequest) SetTags(v []string) {
	o.Tags = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetStatus() UserStatus {
	if o == nil || isNil(o.Status) {
		var ret UserStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetStatusOk() (*UserStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given UserStatus and assigns it to the Status field.
func (o *UpdateUserRequest) SetStatus(v UserStatus) {
	o.Status = &v
}

// GetStatusDescription returns the StatusDescription field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetStatusDescription() string {
	if o == nil || isNil(o.StatusDescription) {
		var ret string
		return ret
	}
	return *o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetStatusDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.StatusDescription) {
    return nil, false
	}
	return o.StatusDescription, true
}

// HasStatusDescription returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasStatusDescription() bool {
	if o != nil && !isNil(o.StatusDescription) {
		return true
	}

	return false
}

// SetStatusDescription gets a reference to the given string and assigns it to the StatusDescription field.
func (o *UpdateUserRequest) SetStatusDescription(v string) {
	o.StatusDescription = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetBio() string {
	if o == nil || isNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetBioOk() (*string, bool) {
	if o == nil || isNil(o.Bio) {
    return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasBio() bool {
	if o != nil && !isNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *UpdateUserRequest) SetBio(v string) {
	o.Bio = &v
}

// GetBioLinks returns the BioLinks field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetBioLinks() []string {
	if o == nil || isNil(o.BioLinks) {
		var ret []string
		return ret
	}
	return o.BioLinks
}

// GetBioLinksOk returns a tuple with the BioLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetBioLinksOk() ([]string, bool) {
	if o == nil || isNil(o.BioLinks) {
    return nil, false
	}
	return o.BioLinks, true
}

// HasBioLinks returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasBioLinks() bool {
	if o != nil && !isNil(o.BioLinks) {
		return true
	}

	return false
}

// SetBioLinks gets a reference to the given []string and assigns it to the BioLinks field.
func (o *UpdateUserRequest) SetBioLinks(v []string) {
	o.BioLinks = v
}

// GetUserIcon returns the UserIcon field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetUserIcon() string {
	if o == nil || isNil(o.UserIcon) {
		var ret string
		return ret
	}
	return *o.UserIcon
}

// GetUserIconOk returns a tuple with the UserIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetUserIconOk() (*string, bool) {
	if o == nil || isNil(o.UserIcon) {
    return nil, false
	}
	return o.UserIcon, true
}

// HasUserIcon returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasUserIcon() bool {
	if o != nil && !isNil(o.UserIcon) {
		return true
	}

	return false
}

// SetUserIcon gets a reference to the given string and assigns it to the UserIcon field.
func (o *UpdateUserRequest) SetUserIcon(v string) {
	o.UserIcon = &v
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !isNil(o.AcceptedTOSVersion) {
		toSerialize["acceptedTOSVersion"] = o.AcceptedTOSVersion
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.StatusDescription) {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if !isNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !isNil(o.BioLinks) {
		toSerialize["bioLinks"] = o.BioLinks
	}
	if !isNil(o.UserIcon) {
		toSerialize["userIcon"] = o.UserIcon
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


