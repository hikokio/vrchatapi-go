/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// AddFavoriteRequest struct for AddFavoriteRequest
type AddFavoriteRequest struct {
	Type FavoriteType `json:"type"`
	// Must be either AvatarID, WorldID or UserID.
	FavoriteId string `json:"favoriteId"`
	// Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.
	Tags []string `json:"tags"`
}

// NewAddFavoriteRequest instantiates a new AddFavoriteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddFavoriteRequest(type_ FavoriteType, favoriteId string, tags []string) *AddFavoriteRequest {
	this := AddFavoriteRequest{}
	this.Type = type_
	this.FavoriteId = favoriteId
	this.Tags = tags
	return &this
}

// NewAddFavoriteRequestWithDefaults instantiates a new AddFavoriteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddFavoriteRequestWithDefaults() *AddFavoriteRequest {
	this := AddFavoriteRequest{}
	var type_ FavoriteType = FAVORITETYPE_FRIEND
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *AddFavoriteRequest) GetType() FavoriteType {
	if o == nil {
		var ret FavoriteType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddFavoriteRequest) GetTypeOk() (*FavoriteType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AddFavoriteRequest) SetType(v FavoriteType) {
	o.Type = v
}

// GetFavoriteId returns the FavoriteId field value
func (o *AddFavoriteRequest) GetFavoriteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FavoriteId
}

// GetFavoriteIdOk returns a tuple with the FavoriteId field value
// and a boolean to check if the value has been set.
func (o *AddFavoriteRequest) GetFavoriteIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FavoriteId, true
}

// SetFavoriteId sets field value
func (o *AddFavoriteRequest) SetFavoriteId(v string) {
	o.FavoriteId = v
}

// GetTags returns the Tags field value
func (o *AddFavoriteRequest) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AddFavoriteRequest) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AddFavoriteRequest) SetTags(v []string) {
	o.Tags = v
}

func (o AddFavoriteRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["favoriteId"] = o.FavoriteId
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableAddFavoriteRequest struct {
	value *AddFavoriteRequest
	isSet bool
}

func (v NullableAddFavoriteRequest) Get() *AddFavoriteRequest {
	return v.value
}

func (v *NullableAddFavoriteRequest) Set(val *AddFavoriteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddFavoriteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddFavoriteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddFavoriteRequest(val *AddFavoriteRequest) *NullableAddFavoriteRequest {
	return &NullableAddFavoriteRequest{value: val, isSet: true}
}

func (v NullableAddFavoriteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddFavoriteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


