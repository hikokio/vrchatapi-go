/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// DynamicContentRow struct for DynamicContentRow
type DynamicContentRow struct {
	Index *int32 `json:"index,omitempty"`
	Name string `json:"name"`
	// Usually \"ThisPlatformSupported\", but can also be other values such as \"all\" or platform specific identifiers.
	Platform string `json:"platform"`
	SortHeading string `json:"sortHeading"`
	SortOrder string `json:"sortOrder"`
	SortOwnership string `json:"sortOwnership"`
	// Tag to filter content for this row.
	Tag *string `json:"tag,omitempty"`
	// Type is not present if it is a world.
	Type *string `json:"type,omitempty"`
}

// NewDynamicContentRow instantiates a new DynamicContentRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicContentRow(name string, platform string, sortHeading string, sortOrder string, sortOwnership string) *DynamicContentRow {
	this := DynamicContentRow{}
	this.Name = name
	this.Platform = platform
	this.SortHeading = sortHeading
	this.SortOrder = sortOrder
	this.SortOwnership = sortOwnership
	return &this
}

// NewDynamicContentRowWithDefaults instantiates a new DynamicContentRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicContentRowWithDefaults() *DynamicContentRow {
	this := DynamicContentRow{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *DynamicContentRow) GetIndex() int32 {
	if o == nil || isNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetIndexOk() (*int32, bool) {
	if o == nil || isNil(o.Index) {
    return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *DynamicContentRow) HasIndex() bool {
	if o != nil && !isNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *DynamicContentRow) SetIndex(v int32) {
	o.Index = &v
}

// GetName returns the Name field value
func (o *DynamicContentRow) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DynamicContentRow) SetName(v string) {
	o.Name = v
}

// GetPlatform returns the Platform field value
func (o *DynamicContentRow) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetPlatformOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *DynamicContentRow) SetPlatform(v string) {
	o.Platform = v
}

// GetSortHeading returns the SortHeading field value
func (o *DynamicContentRow) GetSortHeading() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SortHeading
}

// GetSortHeadingOk returns a tuple with the SortHeading field value
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetSortHeadingOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SortHeading, true
}

// SetSortHeading sets field value
func (o *DynamicContentRow) SetSortHeading(v string) {
	o.SortHeading = v
}

// GetSortOrder returns the SortOrder field value
func (o *DynamicContentRow) GetSortOrder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetSortOrderOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *DynamicContentRow) SetSortOrder(v string) {
	o.SortOrder = v
}

// GetSortOwnership returns the SortOwnership field value
func (o *DynamicContentRow) GetSortOwnership() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SortOwnership
}

// GetSortOwnershipOk returns a tuple with the SortOwnership field value
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetSortOwnershipOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SortOwnership, true
}

// SetSortOwnership sets field value
func (o *DynamicContentRow) SetSortOwnership(v string) {
	o.SortOwnership = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *DynamicContentRow) GetTag() string {
	if o == nil || isNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetTagOk() (*string, bool) {
	if o == nil || isNil(o.Tag) {
    return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *DynamicContentRow) HasTag() bool {
	if o != nil && !isNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *DynamicContentRow) SetTag(v string) {
	o.Tag = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DynamicContentRow) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicContentRow) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DynamicContentRow) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DynamicContentRow) SetType(v string) {
	o.Type = &v
}

func (o DynamicContentRow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["platform"] = o.Platform
	}
	if true {
		toSerialize["sortHeading"] = o.SortHeading
	}
	if true {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if true {
		toSerialize["sortOwnership"] = o.SortOwnership
	}
	if !isNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableDynamicContentRow struct {
	value *DynamicContentRow
	isSet bool
}

func (v NullableDynamicContentRow) Get() *DynamicContentRow {
	return v.value
}

func (v *NullableDynamicContentRow) Set(val *DynamicContentRow) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicContentRow) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicContentRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicContentRow(val *DynamicContentRow) *NullableDynamicContentRow {
	return &NullableDynamicContentRow{value: val, isSet: true}
}

func (v NullableDynamicContentRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicContentRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


