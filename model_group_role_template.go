/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// GroupRoleTemplate the model 'GroupRoleTemplate'
type GroupRoleTemplate string

// List of GroupRoleTemplate
const (
	GROUPROLETEMPLATE_DEFAULT GroupRoleTemplate = "default"
	GROUPROLETEMPLATE_MANAGED_FREE GroupRoleTemplate = "managedFree"
	GROUPROLETEMPLATE_MANAGED_INVITE GroupRoleTemplate = "managedInvite"
	GROUPROLETEMPLATE_MANAGED_REQUEST GroupRoleTemplate = "managedRequest"
)

// All allowed values of GroupRoleTemplate enum
var AllowedGroupRoleTemplateEnumValues = []GroupRoleTemplate{
	"default",
	"managedFree",
	"managedInvite",
	"managedRequest",
}

func (v *GroupRoleTemplate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupRoleTemplate(value)
	for _, existing := range AllowedGroupRoleTemplateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupRoleTemplate", value)
}

// NewGroupRoleTemplateFromValue returns a pointer to a valid GroupRoleTemplate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupRoleTemplateFromValue(v string) (*GroupRoleTemplate, error) {
	ev := GroupRoleTemplate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupRoleTemplate: valid values are %v", v, AllowedGroupRoleTemplateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupRoleTemplate) IsValid() bool {
	for _, existing := range AllowedGroupRoleTemplateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupRoleTemplate value
func (v GroupRoleTemplate) Ptr() *GroupRoleTemplate {
	return &v
}

type NullableGroupRoleTemplate struct {
	value *GroupRoleTemplate
	isSet bool
}

func (v NullableGroupRoleTemplate) Get() *GroupRoleTemplate {
	return v.value
}

func (v *NullableGroupRoleTemplate) Set(val *GroupRoleTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRoleTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRoleTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRoleTemplate(val *GroupRoleTemplate) *NullableGroupRoleTemplate {
	return &NullableGroupRoleTemplate{value: val, isSet: true}
}

func (v NullableGroupRoleTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRoleTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

