/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// GroupAuditLogEntry struct for GroupAuditLogEntry
type GroupAuditLogEntry struct {
	Id *string `json:"id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	GroupId *string `json:"groupId,omitempty"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	ActorId *string `json:"actorId,omitempty"`
	ActorDisplayname *string `json:"actorDisplayname,omitempty"`
	// Typically GroupID or GroupRoleID, but could be other types of IDs.
	TargetId *string `json:"targetId,omitempty"`
	// The type of event that occurred. This is a string that is prefixed with the type of object that the event occurred on. For example, a group role update event would be prefixed with `group.role`.
	EventType *string `json:"eventType,omitempty"`
	// A human-readable description of the event.
	Description *string `json:"description,omitempty"`
	// The data associated with the event. The format of this data is dependent on the event type.
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewGroupAuditLogEntry instantiates a new GroupAuditLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupAuditLogEntry() *GroupAuditLogEntry {
	this := GroupAuditLogEntry{}
	var eventType string = "group.update"
	this.EventType = &eventType
	return &this
}

// NewGroupAuditLogEntryWithDefaults instantiates a new GroupAuditLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupAuditLogEntryWithDefaults() *GroupAuditLogEntry {
	this := GroupAuditLogEntry{}
	var eventType string = "group.update"
	this.EventType = &eventType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupAuditLogEntry) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GroupAuditLogEntry) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *GroupAuditLogEntry) SetGroupId(v string) {
	o.GroupId = &v
}

// GetActorId returns the ActorId field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetActorId() string {
	if o == nil || isNil(o.ActorId) {
		var ret string
		return ret
	}
	return *o.ActorId
}

// GetActorIdOk returns a tuple with the ActorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetActorIdOk() (*string, bool) {
	if o == nil || isNil(o.ActorId) {
    return nil, false
	}
	return o.ActorId, true
}

// HasActorId returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasActorId() bool {
	if o != nil && !isNil(o.ActorId) {
		return true
	}

	return false
}

// SetActorId gets a reference to the given string and assigns it to the ActorId field.
func (o *GroupAuditLogEntry) SetActorId(v string) {
	o.ActorId = &v
}

// GetActorDisplayname returns the ActorDisplayname field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetActorDisplayname() string {
	if o == nil || isNil(o.ActorDisplayname) {
		var ret string
		return ret
	}
	return *o.ActorDisplayname
}

// GetActorDisplaynameOk returns a tuple with the ActorDisplayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetActorDisplaynameOk() (*string, bool) {
	if o == nil || isNil(o.ActorDisplayname) {
    return nil, false
	}
	return o.ActorDisplayname, true
}

// HasActorDisplayname returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasActorDisplayname() bool {
	if o != nil && !isNil(o.ActorDisplayname) {
		return true
	}

	return false
}

// SetActorDisplayname gets a reference to the given string and assigns it to the ActorDisplayname field.
func (o *GroupAuditLogEntry) SetActorDisplayname(v string) {
	o.ActorDisplayname = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetTargetId() string {
	if o == nil || isNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetTargetIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetId) {
    return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasTargetId() bool {
	if o != nil && !isNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *GroupAuditLogEntry) SetTargetId(v string) {
	o.TargetId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetEventType() string {
	if o == nil || isNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetEventTypeOk() (*string, bool) {
	if o == nil || isNil(o.EventType) {
    return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasEventType() bool {
	if o != nil && !isNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *GroupAuditLogEntry) SetEventType(v string) {
	o.EventType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupAuditLogEntry) SetDescription(v string) {
	o.Description = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GroupAuditLogEntry) GetData() map[string]interface{} {
	if o == nil || isNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupAuditLogEntry) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Data) {
    return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GroupAuditLogEntry) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *GroupAuditLogEntry) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o GroupAuditLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.ActorId) {
		toSerialize["actorId"] = o.ActorId
	}
	if !isNil(o.ActorDisplayname) {
		toSerialize["actorDisplayname"] = o.ActorDisplayname
	}
	if !isNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !isNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGroupAuditLogEntry struct {
	value *GroupAuditLogEntry
	isSet bool
}

func (v NullableGroupAuditLogEntry) Get() *GroupAuditLogEntry {
	return v.value
}

func (v *NullableGroupAuditLogEntry) Set(val *GroupAuditLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupAuditLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupAuditLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupAuditLogEntry(val *GroupAuditLogEntry) *NullableGroupAuditLogEntry {
	return &NullableGroupAuditLogEntry{value: val, isSet: true}
}

func (v NullableGroupAuditLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupAuditLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


