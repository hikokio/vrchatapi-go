/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// FavoriteType the model 'FavoriteType'
type FavoriteType string

// List of FavoriteType
const (
	FAVORITETYPE_WORLD FavoriteType = "world"
	FAVORITETYPE_FRIEND FavoriteType = "friend"
	FAVORITETYPE_AVATAR FavoriteType = "avatar"
)

// All allowed values of FavoriteType enum
var AllowedFavoriteTypeEnumValues = []FavoriteType{
	"world",
	"friend",
	"avatar",
}

func (v *FavoriteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FavoriteType(value)
	for _, existing := range AllowedFavoriteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FavoriteType", value)
}

// NewFavoriteTypeFromValue returns a pointer to a valid FavoriteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFavoriteTypeFromValue(v string) (*FavoriteType, error) {
	ev := FavoriteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FavoriteType: valid values are %v", v, AllowedFavoriteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FavoriteType) IsValid() bool {
	for _, existing := range AllowedFavoriteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FavoriteType value
func (v FavoriteType) Ptr() *FavoriteType {
	return &v
}

type NullableFavoriteType struct {
	value *FavoriteType
	isSet bool
}

func (v NullableFavoriteType) Get() *FavoriteType {
	return v.value
}

func (v *NullableFavoriteType) Set(val *FavoriteType) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoriteType) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoriteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoriteType(val *FavoriteType) *NullableFavoriteType {
	return &NullableFavoriteType{value: val, isSet: true}
}

func (v NullableFavoriteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoriteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

