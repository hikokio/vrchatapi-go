/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// LimitedUnityPackage 
type LimitedUnityPackage struct {
	// This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
	Platform string `json:"platform"`
	UnityVersion string `json:"unityVersion"`
}

// NewLimitedUnityPackage instantiates a new LimitedUnityPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitedUnityPackage(platform string, unityVersion string) *LimitedUnityPackage {
	this := LimitedUnityPackage{}
	this.Platform = platform
	this.UnityVersion = unityVersion
	return &this
}

// NewLimitedUnityPackageWithDefaults instantiates a new LimitedUnityPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitedUnityPackageWithDefaults() *LimitedUnityPackage {
	this := LimitedUnityPackage{}
	return &this
}

// GetPlatform returns the Platform field value
func (o *LimitedUnityPackage) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *LimitedUnityPackage) GetPlatformOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *LimitedUnityPackage) SetPlatform(v string) {
	o.Platform = v
}

// GetUnityVersion returns the UnityVersion field value
func (o *LimitedUnityPackage) GetUnityVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnityVersion
}

// GetUnityVersionOk returns a tuple with the UnityVersion field value
// and a boolean to check if the value has been set.
func (o *LimitedUnityPackage) GetUnityVersionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UnityVersion, true
}

// SetUnityVersion sets field value
func (o *LimitedUnityPackage) SetUnityVersion(v string) {
	o.UnityVersion = v
}

func (o LimitedUnityPackage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["platform"] = o.Platform
	}
	if true {
		toSerialize["unityVersion"] = o.UnityVersion
	}
	return json.Marshal(toSerialize)
}

type NullableLimitedUnityPackage struct {
	value *LimitedUnityPackage
	isSet bool
}

func (v NullableLimitedUnityPackage) Get() *LimitedUnityPackage {
	return v.value
}

func (v *NullableLimitedUnityPackage) Set(val *LimitedUnityPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitedUnityPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitedUnityPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitedUnityPackage(val *LimitedUnityPackage) *NullableLimitedUnityPackage {
	return &NullableLimitedUnityPackage{value: val, isSet: true}
}

func (v NullableLimitedUnityPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitedUnityPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


