/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// Success struct for Success
type Success struct {
	Success *Response `json:"success,omitempty"`
}

// NewSuccess instantiates a new Success object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccess() *Success {
	this := Success{}
	return &this
}

// NewSuccessWithDefaults instantiates a new Success object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessWithDefaults() *Success {
	this := Success{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *Success) GetSuccess() Response {
	if o == nil || isNil(o.Success) {
		var ret Response
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Success) GetSuccessOk() (*Response, bool) {
	if o == nil || isNil(o.Success) {
    return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *Success) HasSuccess() bool {
	if o != nil && !isNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given Response and assigns it to the Success field.
func (o *Success) SetSuccess(v Response) {
	o.Success = &v
}

func (o Success) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableSuccess struct {
	value *Success
	isSet bool
}

func (v NullableSuccess) Get() *Success {
	return v.value
}

func (v *NullableSuccess) Set(val *Success) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccess(val *Success) *NullableSuccess {
	return &NullableSuccess{value: val, isSet: true}
}

func (v NullableSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


