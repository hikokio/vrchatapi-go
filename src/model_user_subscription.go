/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// UserSubscription 
type UserSubscription struct {
	Id string `json:"id"`
	TransactionId string `json:"transactionId"`
	// Which \"Store\" it came from. Right now only Stores are \"Steam\" and \"Admin\".
	Store string `json:"store"`
	SteamItemId *string `json:"steamItemId,omitempty"`
	Amount float32 `json:"amount"`
	Description string `json:"description"`
	Period SubscriptionPeriod `json:"period"`
	Tier float32 `json:"tier"`
	Active bool `json:"active"`
	Status TransactionStatus `json:"status"`
	Expires time.Time `json:"expires"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	LicenseGroups []string `json:"licenseGroups"`
	IsGift bool `json:"isGift"`
}

// NewUserSubscription instantiates a new UserSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSubscription(id string, transactionId string, store string, amount float32, description string, period SubscriptionPeriod, tier float32, active bool, status TransactionStatus, expires time.Time, createdAt time.Time, updatedAt time.Time, licenseGroups []string, isGift bool) *UserSubscription {
	this := UserSubscription{}
	this.Id = id
	this.TransactionId = transactionId
	this.Store = store
	this.Amount = amount
	this.Description = description
	this.Period = period
	this.Tier = tier
	this.Active = active
	this.Status = status
	this.Expires = expires
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.LicenseGroups = licenseGroups
	this.IsGift = isGift
	return &this
}

// NewUserSubscriptionWithDefaults instantiates a new UserSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSubscriptionWithDefaults() *UserSubscription {
	this := UserSubscription{}
	var period SubscriptionPeriod = SUBSCRIPTIONPERIOD_MONTH
	this.Period = period
	var active bool = true
	this.Active = active
	var status TransactionStatus = TRANSACTIONSTATUS_ACTIVE
	this.Status = status
	var isGift bool = false
	this.IsGift = isGift
	return &this
}

// GetId returns the Id field value
func (o *UserSubscription) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserSubscription) SetId(v string) {
	o.Id = v
}

// GetTransactionId returns the TransactionId field value
func (o *UserSubscription) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetTransactionIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *UserSubscription) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetStore returns the Store field value
func (o *UserSubscription) GetStore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Store
}

// GetStoreOk returns a tuple with the Store field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetStoreOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Store, true
}

// SetStore sets field value
func (o *UserSubscription) SetStore(v string) {
	o.Store = v
}

// GetSteamItemId returns the SteamItemId field value if set, zero value otherwise.
func (o *UserSubscription) GetSteamItemId() string {
	if o == nil || isNil(o.SteamItemId) {
		var ret string
		return ret
	}
	return *o.SteamItemId
}

// GetSteamItemIdOk returns a tuple with the SteamItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetSteamItemIdOk() (*string, bool) {
	if o == nil || isNil(o.SteamItemId) {
    return nil, false
	}
	return o.SteamItemId, true
}

// HasSteamItemId returns a boolean if a field has been set.
func (o *UserSubscription) HasSteamItemId() bool {
	if o != nil && !isNil(o.SteamItemId) {
		return true
	}

	return false
}

// SetSteamItemId gets a reference to the given string and assigns it to the SteamItemId field.
func (o *UserSubscription) SetSteamItemId(v string) {
	o.SteamItemId = &v
}

// GetAmount returns the Amount field value
func (o *UserSubscription) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *UserSubscription) SetAmount(v float32) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *UserSubscription) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UserSubscription) SetDescription(v string) {
	o.Description = v
}

// GetPeriod returns the Period field value
func (o *UserSubscription) GetPeriod() SubscriptionPeriod {
	if o == nil {
		var ret SubscriptionPeriod
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetPeriodOk() (*SubscriptionPeriod, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *UserSubscription) SetPeriod(v SubscriptionPeriod) {
	o.Period = v
}

// GetTier returns the Tier field value
func (o *UserSubscription) GetTier() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetTierOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *UserSubscription) SetTier(v float32) {
	o.Tier = v
}

// GetActive returns the Active field value
func (o *UserSubscription) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetActiveOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *UserSubscription) SetActive(v bool) {
	o.Active = v
}

// GetStatus returns the Status field value
func (o *UserSubscription) GetStatus() TransactionStatus {
	if o == nil {
		var ret TransactionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UserSubscription) SetStatus(v TransactionStatus) {
	o.Status = v
}

// GetExpires returns the Expires field value
func (o *UserSubscription) GetExpires() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetExpiresOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Expires, true
}

// SetExpires sets field value
func (o *UserSubscription) SetExpires(v time.Time) {
	o.Expires = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserSubscription) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserSubscription) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UserSubscription) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UserSubscription) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetLicenseGroups returns the LicenseGroups field value
func (o *UserSubscription) GetLicenseGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LicenseGroups
}

// GetLicenseGroupsOk returns a tuple with the LicenseGroups field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetLicenseGroupsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.LicenseGroups, true
}

// SetLicenseGroups sets field value
func (o *UserSubscription) SetLicenseGroups(v []string) {
	o.LicenseGroups = v
}

// GetIsGift returns the IsGift field value
func (o *UserSubscription) GetIsGift() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGift
}

// GetIsGiftOk returns a tuple with the IsGift field value
// and a boolean to check if the value has been set.
func (o *UserSubscription) GetIsGiftOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsGift, true
}

// SetIsGift sets field value
func (o *UserSubscription) SetIsGift(v bool) {
	o.IsGift = v
}

func (o UserSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["transactionId"] = o.TransactionId
	}
	if true {
		toSerialize["store"] = o.Store
	}
	if !isNil(o.SteamItemId) {
		toSerialize["steamItemId"] = o.SteamItemId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["period"] = o.Period
	}
	if true {
		toSerialize["tier"] = o.Tier
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["expires"] = o.Expires
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["licenseGroups"] = o.LicenseGroups
	}
	if true {
		toSerialize["isGift"] = o.IsGift
	}
	return json.Marshal(toSerialize)
}

type NullableUserSubscription struct {
	value *UserSubscription
	isSet bool
}

func (v NullableUserSubscription) Get() *UserSubscription {
	return v.value
}

func (v *NullableUserSubscription) Set(val *UserSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSubscription(val *UserSubscription) *NullableUserSubscription {
	return &NullableUserSubscription{value: val, isSet: true}
}

func (v NullableUserSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


