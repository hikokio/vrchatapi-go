/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// LicenseAction the model 'LicenseAction'
type LicenseAction string

// List of LicenseAction
const (
	LICENSEACTION_WEAR LicenseAction = "wear"
	LICENSEACTION_HAVE LicenseAction = "have"
)

// All allowed values of LicenseAction enum
var AllowedLicenseActionEnumValues = []LicenseAction{
	"wear",
	"have",
}

func (v *LicenseAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicenseAction(value)
	for _, existing := range AllowedLicenseActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicenseAction", value)
}

// NewLicenseActionFromValue returns a pointer to a valid LicenseAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseActionFromValue(v string) (*LicenseAction, error) {
	ev := LicenseAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicenseAction: valid values are %v", v, AllowedLicenseActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseAction) IsValid() bool {
	for _, existing := range AllowedLicenseActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicenseAction value
func (v LicenseAction) Ptr() *LicenseAction {
	return &v
}

type NullableLicenseAction struct {
	value *LicenseAction
	isSet bool
}

func (v NullableLicenseAction) Get() *LicenseAction {
	return v.value
}

func (v *NullableLicenseAction) Set(val *LicenseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseAction(val *LicenseAction) *NullableLicenseAction {
	return &NullableLicenseAction{value: val, isSet: true}
}

func (v NullableLicenseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

