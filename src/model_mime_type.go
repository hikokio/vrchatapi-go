/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// MIMEType the model 'MIMEType'
type MIMEType string

// List of MIMEType
const (
	MIMETYPE_IMAGE_JPEG MIMEType = "image/jpeg"
	MIMETYPE_IMAGE_JPG MIMEType = "image/jpg"
	MIMETYPE_IMAGE_PNG MIMEType = "image/png"
	MIMETYPE_IMAGE_WEBP MIMEType = "image/webp"
	MIMETYPE_IMAGE_GIF MIMEType = "image/gif"
	MIMETYPE_IMAGE_BMP MIMEType = "image/bmp"
	MIMETYPE_IMAGE_SVGXML MIMEType = "image/svg＋xml"
	MIMETYPE_IMAGE_TIFF MIMEType = "image/tiff"
	MIMETYPE_APPLICATION_X_AVATAR MIMEType = "application/x-avatar"
	MIMETYPE_APPLICATION_X_WORLD MIMEType = "application/x-world"
	MIMETYPE_APPLICATION_GZIP MIMEType = "application/gzip"
	MIMETYPE_APPLICATION_X_RSYNC_SIGNATURE MIMEType = "application/x-rsync-signature"
	MIMETYPE_APPLICATION_X_RSYNC_DELTA MIMEType = "application/x-rsync-delta"
	MIMETYPE_APPLICATION_OCTET_STREAM MIMEType = "application/octet-stream"
)

// All allowed values of MIMEType enum
var AllowedMIMETypeEnumValues = []MIMEType{
	"image/jpeg",
	"image/jpg",
	"image/png",
	"image/webp",
	"image/gif",
	"image/bmp",
	"image/svg＋xml",
	"image/tiff",
	"application/x-avatar",
	"application/x-world",
	"application/gzip",
	"application/x-rsync-signature",
	"application/x-rsync-delta",
	"application/octet-stream",
}

func (v *MIMEType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MIMEType(value)
	for _, existing := range AllowedMIMETypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MIMEType", value)
}

// NewMIMETypeFromValue returns a pointer to a valid MIMEType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMIMETypeFromValue(v string) (*MIMEType, error) {
	ev := MIMEType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MIMEType: valid values are %v", v, AllowedMIMETypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MIMEType) IsValid() bool {
	for _, existing := range AllowedMIMETypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MIMEType value
func (v MIMEType) Ptr() *MIMEType {
	return &v
}

type NullableMIMEType struct {
	value *MIMEType
	isSet bool
}

func (v NullableMIMEType) Get() *MIMEType {
	return v.value
}

func (v *NullableMIMEType) Set(val *MIMEType) {
	v.value = val
	v.isSet = true
}

func (v NullableMIMEType) IsSet() bool {
	return v.isSet
}

func (v *NullableMIMEType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMIMEType(val *MIMEType) *NullableMIMEType {
	return &NullableMIMEType{value: val, isSet: true}
}

func (v NullableMIMEType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMIMEType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

