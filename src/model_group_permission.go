/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// GroupPermission A permission that can be granted to a role in a group.
type GroupPermission struct {
	// The name of the permission.
	Name *string `json:"name,omitempty"`
	// The display name of the permission.
	DisplayName *string `json:"displayName,omitempty"`
	// Human-readable description of the permission.
	Help *string `json:"help,omitempty"`
	// Whether this permission is a \"management\" permission.
	IsManagementPermission *bool `json:"isManagementPermission,omitempty"`
	// Whether the user is allowed to add this permission to a role.
	AllowedToAdd *bool `json:"allowedToAdd,omitempty"`
}

// NewGroupPermission instantiates a new GroupPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPermission() *GroupPermission {
	this := GroupPermission{}
	var isManagementPermission bool = false
	this.IsManagementPermission = &isManagementPermission
	var allowedToAdd bool = false
	this.AllowedToAdd = &allowedToAdd
	return &this
}

// NewGroupPermissionWithDefaults instantiates a new GroupPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPermissionWithDefaults() *GroupPermission {
	this := GroupPermission{}
	var isManagementPermission bool = false
	this.IsManagementPermission = &isManagementPermission
	var allowedToAdd bool = false
	this.AllowedToAdd = &allowedToAdd
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupPermission) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermission) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupPermission) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupPermission) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GroupPermission) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermission) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GroupPermission) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GroupPermission) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHelp returns the Help field value if set, zero value otherwise.
func (o *GroupPermission) GetHelp() string {
	if o == nil || isNil(o.Help) {
		var ret string
		return ret
	}
	return *o.Help
}

// GetHelpOk returns a tuple with the Help field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermission) GetHelpOk() (*string, bool) {
	if o == nil || isNil(o.Help) {
    return nil, false
	}
	return o.Help, true
}

// HasHelp returns a boolean if a field has been set.
func (o *GroupPermission) HasHelp() bool {
	if o != nil && !isNil(o.Help) {
		return true
	}

	return false
}

// SetHelp gets a reference to the given string and assigns it to the Help field.
func (o *GroupPermission) SetHelp(v string) {
	o.Help = &v
}

// GetIsManagementPermission returns the IsManagementPermission field value if set, zero value otherwise.
func (o *GroupPermission) GetIsManagementPermission() bool {
	if o == nil || isNil(o.IsManagementPermission) {
		var ret bool
		return ret
	}
	return *o.IsManagementPermission
}

// GetIsManagementPermissionOk returns a tuple with the IsManagementPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermission) GetIsManagementPermissionOk() (*bool, bool) {
	if o == nil || isNil(o.IsManagementPermission) {
    return nil, false
	}
	return o.IsManagementPermission, true
}

// HasIsManagementPermission returns a boolean if a field has been set.
func (o *GroupPermission) HasIsManagementPermission() bool {
	if o != nil && !isNil(o.IsManagementPermission) {
		return true
	}

	return false
}

// SetIsManagementPermission gets a reference to the given bool and assigns it to the IsManagementPermission field.
func (o *GroupPermission) SetIsManagementPermission(v bool) {
	o.IsManagementPermission = &v
}

// GetAllowedToAdd returns the AllowedToAdd field value if set, zero value otherwise.
func (o *GroupPermission) GetAllowedToAdd() bool {
	if o == nil || isNil(o.AllowedToAdd) {
		var ret bool
		return ret
	}
	return *o.AllowedToAdd
}

// GetAllowedToAddOk returns a tuple with the AllowedToAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPermission) GetAllowedToAddOk() (*bool, bool) {
	if o == nil || isNil(o.AllowedToAdd) {
    return nil, false
	}
	return o.AllowedToAdd, true
}

// HasAllowedToAdd returns a boolean if a field has been set.
func (o *GroupPermission) HasAllowedToAdd() bool {
	if o != nil && !isNil(o.AllowedToAdd) {
		return true
	}

	return false
}

// SetAllowedToAdd gets a reference to the given bool and assigns it to the AllowedToAdd field.
func (o *GroupPermission) SetAllowedToAdd(v bool) {
	o.AllowedToAdd = &v
}

func (o GroupPermission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Help) {
		toSerialize["help"] = o.Help
	}
	if !isNil(o.IsManagementPermission) {
		toSerialize["isManagementPermission"] = o.IsManagementPermission
	}
	if !isNil(o.AllowedToAdd) {
		toSerialize["allowedToAdd"] = o.AllowedToAdd
	}
	return json.Marshal(toSerialize)
}

type NullableGroupPermission struct {
	value *GroupPermission
	isSet bool
}

func (v NullableGroupPermission) Get() *GroupPermission {
	return v.value
}

func (v *NullableGroupPermission) Set(val *GroupPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPermission(val *GroupPermission) *NullableGroupPermission {
	return &NullableGroupPermission{value: val, isSet: true}
}

func (v NullableGroupPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


