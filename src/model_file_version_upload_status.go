/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// FileVersionUploadStatus 
type FileVersionUploadStatus struct {
	UploadId string `json:"uploadId"`
	FileName string `json:"fileName"`
	NextPartNumber float32 `json:"nextPartNumber"`
	MaxParts float32 `json:"maxParts"`
	Parts []map[string]interface{} `json:"parts"`
	// Unknown
	Etags []map[string]interface{} `json:"etags"`
}

// NewFileVersionUploadStatus instantiates a new FileVersionUploadStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileVersionUploadStatus(uploadId string, fileName string, nextPartNumber float32, maxParts float32, parts []map[string]interface{}, etags []map[string]interface{}) *FileVersionUploadStatus {
	this := FileVersionUploadStatus{}
	this.UploadId = uploadId
	this.FileName = fileName
	this.NextPartNumber = nextPartNumber
	this.MaxParts = maxParts
	this.Parts = parts
	this.Etags = etags
	return &this
}

// NewFileVersionUploadStatusWithDefaults instantiates a new FileVersionUploadStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileVersionUploadStatusWithDefaults() *FileVersionUploadStatus {
	this := FileVersionUploadStatus{}
	return &this
}

// GetUploadId returns the UploadId field value
func (o *FileVersionUploadStatus) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetUploadIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *FileVersionUploadStatus) SetUploadId(v string) {
	o.UploadId = v
}

// GetFileName returns the FileName field value
func (o *FileVersionUploadStatus) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetFileNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *FileVersionUploadStatus) SetFileName(v string) {
	o.FileName = v
}

// GetNextPartNumber returns the NextPartNumber field value
func (o *FileVersionUploadStatus) GetNextPartNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NextPartNumber
}

// GetNextPartNumberOk returns a tuple with the NextPartNumber field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetNextPartNumberOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NextPartNumber, true
}

// SetNextPartNumber sets field value
func (o *FileVersionUploadStatus) SetNextPartNumber(v float32) {
	o.NextPartNumber = v
}

// GetMaxParts returns the MaxParts field value
func (o *FileVersionUploadStatus) GetMaxParts() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxParts
}

// GetMaxPartsOk returns a tuple with the MaxParts field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetMaxPartsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MaxParts, true
}

// SetMaxParts sets field value
func (o *FileVersionUploadStatus) SetMaxParts(v float32) {
	o.MaxParts = v
}

// GetParts returns the Parts field value
func (o *FileVersionUploadStatus) GetParts() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetPartsOk() ([]map[string]interface{}, bool) {
	if o == nil {
    return nil, false
	}
	return o.Parts, true
}

// SetParts sets field value
func (o *FileVersionUploadStatus) SetParts(v []map[string]interface{}) {
	o.Parts = v
}

// GetEtags returns the Etags field value
func (o *FileVersionUploadStatus) GetEtags() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Etags
}

// GetEtagsOk returns a tuple with the Etags field value
// and a boolean to check if the value has been set.
func (o *FileVersionUploadStatus) GetEtagsOk() ([]map[string]interface{}, bool) {
	if o == nil {
    return nil, false
	}
	return o.Etags, true
}

// SetEtags sets field value
func (o *FileVersionUploadStatus) SetEtags(v []map[string]interface{}) {
	o.Etags = v
}

func (o FileVersionUploadStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uploadId"] = o.UploadId
	}
	if true {
		toSerialize["fileName"] = o.FileName
	}
	if true {
		toSerialize["nextPartNumber"] = o.NextPartNumber
	}
	if true {
		toSerialize["maxParts"] = o.MaxParts
	}
	if true {
		toSerialize["parts"] = o.Parts
	}
	if true {
		toSerialize["etags"] = o.Etags
	}
	return json.Marshal(toSerialize)
}

type NullableFileVersionUploadStatus struct {
	value *FileVersionUploadStatus
	isSet bool
}

func (v NullableFileVersionUploadStatus) Get() *FileVersionUploadStatus {
	return v.value
}

func (v *NullableFileVersionUploadStatus) Set(val *FileVersionUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVersionUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVersionUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVersionUploadStatus(val *FileVersionUploadStatus) *NullableFileVersionUploadStatus {
	return &NullableFileVersionUploadStatus{value: val, isSet: true}
}

func (v NullableFileVersionUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVersionUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


