/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// InfoPushDataClickable struct for InfoPushDataClickable
type InfoPushDataClickable struct {
	Command string `json:"command"`
	// In case of OpenURL, this would contain the link.
	Parameters []string `json:"parameters,omitempty"`
}

// NewInfoPushDataClickable instantiates a new InfoPushDataClickable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoPushDataClickable(command string) *InfoPushDataClickable {
	this := InfoPushDataClickable{}
	this.Command = command
	return &this
}

// NewInfoPushDataClickableWithDefaults instantiates a new InfoPushDataClickable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoPushDataClickableWithDefaults() *InfoPushDataClickable {
	this := InfoPushDataClickable{}
	return &this
}

// GetCommand returns the Command field value
func (o *InfoPushDataClickable) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *InfoPushDataClickable) GetCommandOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *InfoPushDataClickable) SetCommand(v string) {
	o.Command = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *InfoPushDataClickable) GetParameters() []string {
	if o == nil || isNil(o.Parameters) {
		var ret []string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushDataClickable) GetParametersOk() ([]string, bool) {
	if o == nil || isNil(o.Parameters) {
    return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *InfoPushDataClickable) HasParameters() bool {
	if o != nil && !isNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []string and assigns it to the Parameters field.
func (o *InfoPushDataClickable) SetParameters(v []string) {
	o.Parameters = v
}

func (o InfoPushDataClickable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["command"] = o.Command
	}
	if !isNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableInfoPushDataClickable struct {
	value *InfoPushDataClickable
	isSet bool
}

func (v NullableInfoPushDataClickable) Get() *InfoPushDataClickable {
	return v.value
}

func (v *NullableInfoPushDataClickable) Set(val *InfoPushDataClickable) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoPushDataClickable) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoPushDataClickable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoPushDataClickable(val *InfoPushDataClickable) *NullableInfoPushDataClickable {
	return &NullableInfoPushDataClickable{value: val, isSet: true}
}

func (v NullableInfoPushDataClickable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoPushDataClickable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


