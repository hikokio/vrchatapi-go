/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// LicenseGroup 
type LicenseGroup struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Licenses []License `json:"licenses"`
}

// NewLicenseGroup instantiates a new LicenseGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseGroup(id string, name string, description string, licenses []License) *LicenseGroup {
	this := LicenseGroup{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Licenses = licenses
	return &this
}

// NewLicenseGroupWithDefaults instantiates a new LicenseGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseGroupWithDefaults() *LicenseGroup {
	this := LicenseGroup{}
	return &this
}

// GetId returns the Id field value
func (o *LicenseGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LicenseGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *LicenseGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LicenseGroup) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *LicenseGroup) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LicenseGroup) SetDescription(v string) {
	o.Description = v
}

// GetLicenses returns the Licenses field value
func (o *LicenseGroup) GetLicenses() []License {
	if o == nil {
		var ret []License
		return ret
	}

	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetLicensesOk() ([]License, bool) {
	if o == nil {
    return nil, false
	}
	return o.Licenses, true
}

// SetLicenses sets field value
func (o *LicenseGroup) SetLicenses(v []License) {
	o.Licenses = v
}

func (o LicenseGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["licenses"] = o.Licenses
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseGroup struct {
	value *LicenseGroup
	isSet bool
}

func (v NullableLicenseGroup) Get() *LicenseGroup {
	return v.value
}

func (v *NullableLicenseGroup) Set(val *LicenseGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseGroup(val *LicenseGroup) *NullableLicenseGroup {
	return &NullableLicenseGroup{value: val, isSet: true}
}

func (v NullableLicenseGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


