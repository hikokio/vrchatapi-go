/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// InfoPush 
type InfoPush struct {
	Id string `json:"id"`
	IsEnabled bool `json:"isEnabled"`
	ReleaseStatus ReleaseStatus `json:"releaseStatus"`
	Priority int32 `json:"priority"`
	//  
	Tags []string `json:"tags"`
	Data InfoPushData `json:"data"`
	// Unknown usage, MD5
	Hash string `json:"hash"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// 
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
}

// NewInfoPush instantiates a new InfoPush object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoPush(id string, isEnabled bool, releaseStatus ReleaseStatus, priority int32, tags []string, data InfoPushData, hash string, createdAt time.Time, updatedAt time.Time) *InfoPush {
	this := InfoPush{}
	this.Id = id
	this.IsEnabled = isEnabled
	this.ReleaseStatus = releaseStatus
	this.Priority = priority
	this.Tags = tags
	this.Data = data
	this.Hash = hash
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewInfoPushWithDefaults instantiates a new InfoPush object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoPushWithDefaults() *InfoPush {
	this := InfoPush{}
	var isEnabled bool = true
	this.IsEnabled = isEnabled
	var releaseStatus ReleaseStatus = RELEASESTATUS_PUBLIC
	this.ReleaseStatus = releaseStatus
	return &this
}

// GetId returns the Id field value
func (o *InfoPush) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InfoPush) SetId(v string) {
	o.Id = v
}

// GetIsEnabled returns the IsEnabled field value
func (o *InfoPush) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *InfoPush) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

// GetReleaseStatus returns the ReleaseStatus field value
func (o *InfoPush) GetReleaseStatus() ReleaseStatus {
	if o == nil {
		var ret ReleaseStatus
		return ret
	}

	return o.ReleaseStatus
}

// GetReleaseStatusOk returns a tuple with the ReleaseStatus field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetReleaseStatusOk() (*ReleaseStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReleaseStatus, true
}

// SetReleaseStatus sets field value
func (o *InfoPush) SetReleaseStatus(v ReleaseStatus) {
	o.ReleaseStatus = v
}

// GetPriority returns the Priority field value
func (o *InfoPush) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetPriorityOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *InfoPush) SetPriority(v int32) {
	o.Priority = v
}

// GetTags returns the Tags field value
func (o *InfoPush) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *InfoPush) SetTags(v []string) {
	o.Tags = v
}

// GetData returns the Data field value
func (o *InfoPush) GetData() InfoPushData {
	if o == nil {
		var ret InfoPushData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetDataOk() (*InfoPushData, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *InfoPush) SetData(v InfoPushData) {
	o.Data = v
}

// GetHash returns the Hash field value
func (o *InfoPush) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetHashOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *InfoPush) SetHash(v string) {
	o.Hash = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InfoPush) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InfoPush) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *InfoPush) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *InfoPush) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *InfoPush) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *InfoPush) GetStartDate() time.Time {
	if o == nil || isNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPush) GetStartDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.StartDate) {
    return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *InfoPush) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *InfoPush) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *InfoPush) GetEndDate() time.Time {
	if o == nil || isNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPush) GetEndDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.EndDate) {
    return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *InfoPush) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *InfoPush) SetEndDate(v time.Time) {
	o.EndDate = &v
}

func (o InfoPush) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if true {
		toSerialize["releaseStatus"] = o.ReleaseStatus
	}
	if true {
		toSerialize["priority"] = o.Priority
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	return json.Marshal(toSerialize)
}

type NullableInfoPush struct {
	value *InfoPush
	isSet bool
}

func (v NullableInfoPush) Get() *InfoPush {
	return v.value
}

func (v *NullableInfoPush) Set(val *InfoPush) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoPush) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoPush) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoPush(val *InfoPush) *NullableInfoPush {
	return &NullableInfoPush{value: val, isSet: true}
}

func (v NullableInfoPush) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoPush) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


