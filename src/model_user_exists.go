/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// UserExists Status object representing if a queried user by username or userId exists or not. This model is primarily used by the `/auth/exists` endpoint, which in turn is used during registration. Please see the documentation on that endpoint for more information on usage.
type UserExists struct {
	// Status if a user exist with that username or userId.
	UserExists bool `json:"userExists"`
}

// NewUserExists instantiates a new UserExists object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserExists(userExists bool) *UserExists {
	this := UserExists{}
	this.UserExists = userExists
	return &this
}

// NewUserExistsWithDefaults instantiates a new UserExists object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserExistsWithDefaults() *UserExists {
	this := UserExists{}
	var userExists bool = false
	this.UserExists = userExists
	return &this
}

// GetUserExists returns the UserExists field value
func (o *UserExists) GetUserExists() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UserExists
}

// GetUserExistsOk returns a tuple with the UserExists field value
// and a boolean to check if the value has been set.
func (o *UserExists) GetUserExistsOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UserExists, true
}

// SetUserExists sets field value
func (o *UserExists) SetUserExists(v bool) {
	o.UserExists = v
}

func (o UserExists) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userExists"] = o.UserExists
	}
	return json.Marshal(toSerialize)
}

type NullableUserExists struct {
	value *UserExists
	isSet bool
}

func (v NullableUserExists) Get() *UserExists {
	return v.value
}

func (v *NullableUserExists) Set(val *UserExists) {
	v.value = val
	v.isSet = true
}

func (v NullableUserExists) IsSet() bool {
	return v.isSet
}

func (v *NullableUserExists) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserExists(val *UserExists) *NullableUserExists {
	return &NullableUserExists{value: val, isSet: true}
}

func (v NullableUserExists) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserExists) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


