/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// GroupPrivacy the model 'GroupPrivacy'
type GroupPrivacy string

// List of GroupPrivacy
const (
	GROUPPRIVACY_DEFAULT GroupPrivacy = "default"
	GROUPPRIVACY_PRIVATE GroupPrivacy = "private"
)

// All allowed values of GroupPrivacy enum
var AllowedGroupPrivacyEnumValues = []GroupPrivacy{
	"default",
	"private",
}

func (v *GroupPrivacy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupPrivacy(value)
	for _, existing := range AllowedGroupPrivacyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupPrivacy", value)
}

// NewGroupPrivacyFromValue returns a pointer to a valid GroupPrivacy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupPrivacyFromValue(v string) (*GroupPrivacy, error) {
	ev := GroupPrivacy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupPrivacy: valid values are %v", v, AllowedGroupPrivacyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupPrivacy) IsValid() bool {
	for _, existing := range AllowedGroupPrivacyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupPrivacy value
func (v GroupPrivacy) Ptr() *GroupPrivacy {
	return &v
}

type NullableGroupPrivacy struct {
	value *GroupPrivacy
	isSet bool
}

func (v NullableGroupPrivacy) Get() *GroupPrivacy {
	return v.value
}

func (v *NullableGroupPrivacy) Set(val *GroupPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPrivacy(val *GroupPrivacy) *NullableGroupPrivacy {
	return &NullableGroupPrivacy{value: val, isSet: true}
}

func (v NullableGroupPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

