/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// UpdateGroupRequest struct for UpdateGroupRequest
type UpdateGroupRequest struct {
	Name *string `json:"name,omitempty"`
	ShortCode *string `json:"shortCode,omitempty"`
	Description *string `json:"description,omitempty"`
	JoinState *GroupJoinState `json:"joinState,omitempty"`
	IconId NullableString `json:"iconId,omitempty"`
	BannerId NullableString `json:"bannerId,omitempty"`
	// 3 letter language code
	Languages []string `json:"languages,omitempty"`
	Links []string `json:"links,omitempty"`
	Rules *string `json:"rules,omitempty"`
	//  
	Tags []string `json:"tags,omitempty"`
}

// NewUpdateGroupRequest instantiates a new UpdateGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupRequest() *UpdateGroupRequest {
	this := UpdateGroupRequest{}
	var joinState GroupJoinState = GROUPJOINSTATE_OPEN
	this.JoinState = &joinState
	return &this
}

// NewUpdateGroupRequestWithDefaults instantiates a new UpdateGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupRequestWithDefaults() *UpdateGroupRequest {
	this := UpdateGroupRequest{}
	var joinState GroupJoinState = GROUPJOINSTATE_OPEN
	this.JoinState = &joinState
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateGroupRequest) SetName(v string) {
	o.Name = &v
}

// GetShortCode returns the ShortCode field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetShortCode() string {
	if o == nil || isNil(o.ShortCode) {
		var ret string
		return ret
	}
	return *o.ShortCode
}

// GetShortCodeOk returns a tuple with the ShortCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetShortCodeOk() (*string, bool) {
	if o == nil || isNil(o.ShortCode) {
    return nil, false
	}
	return o.ShortCode, true
}

// HasShortCode returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasShortCode() bool {
	if o != nil && !isNil(o.ShortCode) {
		return true
	}

	return false
}

// SetShortCode gets a reference to the given string and assigns it to the ShortCode field.
func (o *UpdateGroupRequest) SetShortCode(v string) {
	o.ShortCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateGroupRequest) SetDescription(v string) {
	o.Description = &v
}

// GetJoinState returns the JoinState field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetJoinState() GroupJoinState {
	if o == nil || isNil(o.JoinState) {
		var ret GroupJoinState
		return ret
	}
	return *o.JoinState
}

// GetJoinStateOk returns a tuple with the JoinState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetJoinStateOk() (*GroupJoinState, bool) {
	if o == nil || isNil(o.JoinState) {
    return nil, false
	}
	return o.JoinState, true
}

// HasJoinState returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasJoinState() bool {
	if o != nil && !isNil(o.JoinState) {
		return true
	}

	return false
}

// SetJoinState gets a reference to the given GroupJoinState and assigns it to the JoinState field.
func (o *UpdateGroupRequest) SetJoinState(v GroupJoinState) {
	o.JoinState = &v
}

// GetIconId returns the IconId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGroupRequest) GetIconId() string {
	if o == nil || isNil(o.IconId.Get()) {
		var ret string
		return ret
	}
	return *o.IconId.Get()
}

// GetIconIdOk returns a tuple with the IconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGroupRequest) GetIconIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.IconId.Get(), o.IconId.IsSet()
}

// HasIconId returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasIconId() bool {
	if o != nil && o.IconId.IsSet() {
		return true
	}

	return false
}

// SetIconId gets a reference to the given NullableString and assigns it to the IconId field.
func (o *UpdateGroupRequest) SetIconId(v string) {
	o.IconId.Set(&v)
}
// SetIconIdNil sets the value for IconId to be an explicit nil
func (o *UpdateGroupRequest) SetIconIdNil() {
	o.IconId.Set(nil)
}

// UnsetIconId ensures that no value is present for IconId, not even an explicit nil
func (o *UpdateGroupRequest) UnsetIconId() {
	o.IconId.Unset()
}

// GetBannerId returns the BannerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGroupRequest) GetBannerId() string {
	if o == nil || isNil(o.BannerId.Get()) {
		var ret string
		return ret
	}
	return *o.BannerId.Get()
}

// GetBannerIdOk returns a tuple with the BannerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGroupRequest) GetBannerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BannerId.Get(), o.BannerId.IsSet()
}

// HasBannerId returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasBannerId() bool {
	if o != nil && o.BannerId.IsSet() {
		return true
	}

	return false
}

// SetBannerId gets a reference to the given NullableString and assigns it to the BannerId field.
func (o *UpdateGroupRequest) SetBannerId(v string) {
	o.BannerId.Set(&v)
}
// SetBannerIdNil sets the value for BannerId to be an explicit nil
func (o *UpdateGroupRequest) SetBannerIdNil() {
	o.BannerId.Set(nil)
}

// UnsetBannerId ensures that no value is present for BannerId, not even an explicit nil
func (o *UpdateGroupRequest) UnsetBannerId() {
	o.BannerId.Unset()
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetLanguages() []string {
	if o == nil || isNil(o.Languages) {
		var ret []string
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetLanguagesOk() ([]string, bool) {
	if o == nil || isNil(o.Languages) {
    return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasLanguages() bool {
	if o != nil && !isNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []string and assigns it to the Languages field.
func (o *UpdateGroupRequest) SetLanguages(v []string) {
	o.Languages = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetLinks() []string {
	if o == nil || isNil(o.Links) {
		var ret []string
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetLinksOk() ([]string, bool) {
	if o == nil || isNil(o.Links) {
    return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []string and assigns it to the Links field.
func (o *UpdateGroupRequest) SetLinks(v []string) {
	o.Links = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetRules() string {
	if o == nil || isNil(o.Rules) {
		var ret string
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetRulesOk() (*string, bool) {
	if o == nil || isNil(o.Rules) {
    return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given string and assigns it to the Rules field.
func (o *UpdateGroupRequest) SetRules(v string) {
	o.Rules = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateGroupRequest) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ShortCode) {
		toSerialize["shortCode"] = o.ShortCode
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.JoinState) {
		toSerialize["joinState"] = o.JoinState
	}
	if o.IconId.IsSet() {
		toSerialize["iconId"] = o.IconId.Get()
	}
	if o.BannerId.IsSet() {
		toSerialize["bannerId"] = o.BannerId.Get()
	}
	if !isNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateGroupRequest struct {
	value *UpdateGroupRequest
	isSet bool
}

func (v NullableUpdateGroupRequest) Get() *UpdateGroupRequest {
	return v.value
}

func (v *NullableUpdateGroupRequest) Set(val *UpdateGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupRequest(val *UpdateGroupRequest) *NullableUpdateGroupRequest {
	return &NullableUpdateGroupRequest{value: val, isSet: true}
}

func (v NullableUpdateGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


