/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// PlayerModerationType the model 'PlayerModerationType'
type PlayerModerationType string

// List of PlayerModerationType
const (
	PLAYERMODERATIONTYPE_MUTE PlayerModerationType = "mute"
	PLAYERMODERATIONTYPE_UNMUTE PlayerModerationType = "unmute"
	PLAYERMODERATIONTYPE_BLOCK PlayerModerationType = "block"
	PLAYERMODERATIONTYPE_UNBLOCK PlayerModerationType = "unblock"
	PLAYERMODERATIONTYPE_INTERACT_ON PlayerModerationType = "interactOn"
	PLAYERMODERATIONTYPE_INTERACT_OFF PlayerModerationType = "interactOff"
)

// All allowed values of PlayerModerationType enum
var AllowedPlayerModerationTypeEnumValues = []PlayerModerationType{
	"mute",
	"unmute",
	"block",
	"unblock",
	"interactOn",
	"interactOff",
}

func (v *PlayerModerationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlayerModerationType(value)
	for _, existing := range AllowedPlayerModerationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlayerModerationType", value)
}

// NewPlayerModerationTypeFromValue returns a pointer to a valid PlayerModerationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayerModerationTypeFromValue(v string) (*PlayerModerationType, error) {
	ev := PlayerModerationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlayerModerationType: valid values are %v", v, AllowedPlayerModerationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayerModerationType) IsValid() bool {
	for _, existing := range AllowedPlayerModerationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayerModerationType value
func (v PlayerModerationType) Ptr() *PlayerModerationType {
	return &v
}

type NullablePlayerModerationType struct {
	value *PlayerModerationType
	isSet bool
}

func (v NullablePlayerModerationType) Get() *PlayerModerationType {
	return v.value
}

func (v *NullablePlayerModerationType) Set(val *PlayerModerationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerModerationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerModerationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerModerationType(val *PlayerModerationType) *NullablePlayerModerationType {
	return &NullablePlayerModerationType{value: val, isSet: true}
}

func (v NullablePlayerModerationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerModerationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

