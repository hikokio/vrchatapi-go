/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// DeploymentGroup Used to identify which API deployment cluster is currently responding.  `blue` and `green` are used by Production. `grape`and `cherry` are used during Development.  [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
type DeploymentGroup string

// List of DeploymentGroup
const (
	DEPLOYMENTGROUP_BLUE DeploymentGroup = "blue"
	DEPLOYMENTGROUP_GREEN DeploymentGroup = "green"
	DEPLOYMENTGROUP_GRAPE DeploymentGroup = "grape"
	DEPLOYMENTGROUP_CHERRY DeploymentGroup = "cherry"
)

// All allowed values of DeploymentGroup enum
var AllowedDeploymentGroupEnumValues = []DeploymentGroup{
	"blue",
	"green",
	"grape",
	"cherry",
}

func (v *DeploymentGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentGroup(value)
	for _, existing := range AllowedDeploymentGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentGroup", value)
}

// NewDeploymentGroupFromValue returns a pointer to a valid DeploymentGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentGroupFromValue(v string) (*DeploymentGroup, error) {
	ev := DeploymentGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentGroup: valid values are %v", v, AllowedDeploymentGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentGroup) IsValid() bool {
	for _, existing := range AllowedDeploymentGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentGroup value
func (v DeploymentGroup) Ptr() *DeploymentGroup {
	return &v
}

type NullableDeploymentGroup struct {
	value *DeploymentGroup
	isSet bool
}

func (v NullableDeploymentGroup) Get() *DeploymentGroup {
	return v.value
}

func (v *NullableDeploymentGroup) Set(val *DeploymentGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentGroup(val *DeploymentGroup) *NullableDeploymentGroup {
	return &NullableDeploymentGroup{value: val, isSet: true}
}

func (v NullableDeploymentGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

