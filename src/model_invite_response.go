/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// InviteResponse struct for InviteResponse
type InviteResponse struct {
	ResponseSlot int32 `json:"responseSlot"`
}

// NewInviteResponse instantiates a new InviteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteResponse(responseSlot int32) *InviteResponse {
	this := InviteResponse{}
	this.ResponseSlot = responseSlot
	return &this
}

// NewInviteResponseWithDefaults instantiates a new InviteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteResponseWithDefaults() *InviteResponse {
	this := InviteResponse{}
	return &this
}

// GetResponseSlot returns the ResponseSlot field value
func (o *InviteResponse) GetResponseSlot() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResponseSlot
}

// GetResponseSlotOk returns a tuple with the ResponseSlot field value
// and a boolean to check if the value has been set.
func (o *InviteResponse) GetResponseSlotOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ResponseSlot, true
}

// SetResponseSlot sets field value
func (o *InviteResponse) SetResponseSlot(v int32) {
	o.ResponseSlot = v
}

func (o InviteResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["responseSlot"] = o.ResponseSlot
	}
	return json.Marshal(toSerialize)
}

type NullableInviteResponse struct {
	value *InviteResponse
	isSet bool
}

func (v NullableInviteResponse) Get() *InviteResponse {
	return v.value
}

func (v *NullableInviteResponse) Set(val *InviteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteResponse(val *InviteResponse) *NullableInviteResponse {
	return &NullableInviteResponse{value: val, isSet: true}
}

func (v NullableInviteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


