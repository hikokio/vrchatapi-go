/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// FavoriteGroup 
type FavoriteGroup struct {
	DisplayName string `json:"displayName"`
	Id string `json:"id"`
	Name string `json:"name"`
	OwnerDisplayName string `json:"ownerDisplayName"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	OwnerId string `json:"ownerId"`
	//  
	Tags []string `json:"tags"`
	Type FavoriteType `json:"type"`
	Visibility FavoriteGroupVisibility `json:"visibility"`
}

// NewFavoriteGroup instantiates a new FavoriteGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavoriteGroup(displayName string, id string, name string, ownerDisplayName string, ownerId string, tags []string, type_ FavoriteType, visibility FavoriteGroupVisibility) *FavoriteGroup {
	this := FavoriteGroup{}
	this.DisplayName = displayName
	this.Id = id
	this.Name = name
	this.OwnerDisplayName = ownerDisplayName
	this.OwnerId = ownerId
	this.Tags = tags
	this.Type = type_
	this.Visibility = visibility
	return &this
}

// NewFavoriteGroupWithDefaults instantiates a new FavoriteGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteGroupWithDefaults() *FavoriteGroup {
	this := FavoriteGroup{}
	var type_ FavoriteType = FAVORITETYPE_FRIEND
	this.Type = type_
	var visibility FavoriteGroupVisibility = FAVORITEGROUPVISIBILITY_PRIVATE
	this.Visibility = visibility
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *FavoriteGroup) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *FavoriteGroup) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetId returns the Id field value
func (o *FavoriteGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FavoriteGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FavoriteGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FavoriteGroup) SetName(v string) {
	o.Name = v
}

// GetOwnerDisplayName returns the OwnerDisplayName field value
func (o *FavoriteGroup) GetOwnerDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerDisplayName
}

// GetOwnerDisplayNameOk returns a tuple with the OwnerDisplayName field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetOwnerDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OwnerDisplayName, true
}

// SetOwnerDisplayName sets field value
func (o *FavoriteGroup) SetOwnerDisplayName(v string) {
	o.OwnerDisplayName = v
}

// GetOwnerId returns the OwnerId field value
func (o *FavoriteGroup) GetOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetOwnerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OwnerId, true
}

// SetOwnerId sets field value
func (o *FavoriteGroup) SetOwnerId(v string) {
	o.OwnerId = v
}

// GetTags returns the Tags field value
func (o *FavoriteGroup) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *FavoriteGroup) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *FavoriteGroup) GetType() FavoriteType {
	if o == nil {
		var ret FavoriteType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetTypeOk() (*FavoriteType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FavoriteGroup) SetType(v FavoriteType) {
	o.Type = v
}

// GetVisibility returns the Visibility field value
func (o *FavoriteGroup) GetVisibility() FavoriteGroupVisibility {
	if o == nil {
		var ret FavoriteGroupVisibility
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *FavoriteGroup) GetVisibilityOk() (*FavoriteGroupVisibility, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *FavoriteGroup) SetVisibility(v FavoriteGroupVisibility) {
	o.Visibility = v
}

func (o FavoriteGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["ownerDisplayName"] = o.OwnerDisplayName
	}
	if true {
		toSerialize["ownerId"] = o.OwnerId
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableFavoriteGroup struct {
	value *FavoriteGroup
	isSet bool
}

func (v NullableFavoriteGroup) Get() *FavoriteGroup {
	return v.value
}

func (v *NullableFavoriteGroup) Set(val *FavoriteGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoriteGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoriteGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoriteGroup(val *FavoriteGroup) *NullableFavoriteGroup {
	return &NullableFavoriteGroup{value: val, isSet: true}
}

func (v NullableFavoriteGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoriteGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


