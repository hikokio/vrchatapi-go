/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// GroupMemberLimitedUser Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
type GroupMemberLimitedUser struct {
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	Id *string `json:"id,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	ThumbnailUrl *string `json:"thumbnailUrl,omitempty"`
	IconUrl *string `json:"iconUrl,omitempty"`
}

// NewGroupMemberLimitedUser instantiates a new GroupMemberLimitedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupMemberLimitedUser() *GroupMemberLimitedUser {
	this := GroupMemberLimitedUser{}
	return &this
}

// NewGroupMemberLimitedUserWithDefaults instantiates a new GroupMemberLimitedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupMemberLimitedUserWithDefaults() *GroupMemberLimitedUser {
	this := GroupMemberLimitedUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupMemberLimitedUser) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMemberLimitedUser) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupMemberLimitedUser) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupMemberLimitedUser) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GroupMemberLimitedUser) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMemberLimitedUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GroupMemberLimitedUser) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GroupMemberLimitedUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *GroupMemberLimitedUser) GetThumbnailUrl() string {
	if o == nil || isNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMemberLimitedUser) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || isNil(o.ThumbnailUrl) {
    return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *GroupMemberLimitedUser) HasThumbnailUrl() bool {
	if o != nil && !isNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *GroupMemberLimitedUser) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *GroupMemberLimitedUser) GetIconUrl() string {
	if o == nil || isNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMemberLimitedUser) GetIconUrlOk() (*string, bool) {
	if o == nil || isNil(o.IconUrl) {
    return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *GroupMemberLimitedUser) HasIconUrl() bool {
	if o != nil && !isNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *GroupMemberLimitedUser) SetIconUrl(v string) {
	o.IconUrl = &v
}

func (o GroupMemberLimitedUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.ThumbnailUrl) {
		toSerialize["thumbnailUrl"] = o.ThumbnailUrl
	}
	if !isNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	return json.Marshal(toSerialize)
}

type NullableGroupMemberLimitedUser struct {
	value *GroupMemberLimitedUser
	isSet bool
}

func (v NullableGroupMemberLimitedUser) Get() *GroupMemberLimitedUser {
	return v.value
}

func (v *NullableGroupMemberLimitedUser) Set(val *GroupMemberLimitedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMemberLimitedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMemberLimitedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMemberLimitedUser(val *GroupMemberLimitedUser) *NullableGroupMemberLimitedUser {
	return &NullableGroupMemberLimitedUser{value: val, isSet: true}
}

func (v NullableGroupMemberLimitedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMemberLimitedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


