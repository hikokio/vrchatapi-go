/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// InfoPushDataArticleContent struct for InfoPushDataArticleContent
type InfoPushDataArticleContent struct {
	Text *string `json:"text,omitempty"`
	ImageUrl *string `json:"imageUrl,omitempty"`
	OnPressed *InfoPushDataClickable `json:"onPressed,omitempty"`
}

// NewInfoPushDataArticleContent instantiates a new InfoPushDataArticleContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoPushDataArticleContent() *InfoPushDataArticleContent {
	this := InfoPushDataArticleContent{}
	return &this
}

// NewInfoPushDataArticleContentWithDefaults instantiates a new InfoPushDataArticleContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoPushDataArticleContentWithDefaults() *InfoPushDataArticleContent {
	this := InfoPushDataArticleContent{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *InfoPushDataArticleContent) GetText() string {
	if o == nil || isNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushDataArticleContent) GetTextOk() (*string, bool) {
	if o == nil || isNil(o.Text) {
    return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *InfoPushDataArticleContent) HasText() bool {
	if o != nil && !isNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *InfoPushDataArticleContent) SetText(v string) {
	o.Text = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *InfoPushDataArticleContent) GetImageUrl() string {
	if o == nil || isNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushDataArticleContent) GetImageUrlOk() (*string, bool) {
	if o == nil || isNil(o.ImageUrl) {
    return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *InfoPushDataArticleContent) HasImageUrl() bool {
	if o != nil && !isNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *InfoPushDataArticleContent) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetOnPressed returns the OnPressed field value if set, zero value otherwise.
func (o *InfoPushDataArticleContent) GetOnPressed() InfoPushDataClickable {
	if o == nil || isNil(o.OnPressed) {
		var ret InfoPushDataClickable
		return ret
	}
	return *o.OnPressed
}

// GetOnPressedOk returns a tuple with the OnPressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushDataArticleContent) GetOnPressedOk() (*InfoPushDataClickable, bool) {
	if o == nil || isNil(o.OnPressed) {
    return nil, false
	}
	return o.OnPressed, true
}

// HasOnPressed returns a boolean if a field has been set.
func (o *InfoPushDataArticleContent) HasOnPressed() bool {
	if o != nil && !isNil(o.OnPressed) {
		return true
	}

	return false
}

// SetOnPressed gets a reference to the given InfoPushDataClickable and assigns it to the OnPressed field.
func (o *InfoPushDataArticleContent) SetOnPressed(v InfoPushDataClickable) {
	o.OnPressed = &v
}

func (o InfoPushDataArticleContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !isNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if !isNil(o.OnPressed) {
		toSerialize["onPressed"] = o.OnPressed
	}
	return json.Marshal(toSerialize)
}

type NullableInfoPushDataArticleContent struct {
	value *InfoPushDataArticleContent
	isSet bool
}

func (v NullableInfoPushDataArticleContent) Get() *InfoPushDataArticleContent {
	return v.value
}

func (v *NullableInfoPushDataArticleContent) Set(val *InfoPushDataArticleContent) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoPushDataArticleContent) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoPushDataArticleContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoPushDataArticleContent(val *InfoPushDataArticleContent) *NullableInfoPushDataArticleContent {
	return &NullableInfoPushDataArticleContent{value: val, isSet: true}
}

func (v NullableInfoPushDataArticleContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoPushDataArticleContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


