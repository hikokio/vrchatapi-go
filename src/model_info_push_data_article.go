/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// InfoPushDataArticle struct for InfoPushDataArticle
type InfoPushDataArticle struct {
	Content *InfoPushDataArticleContent `json:"content,omitempty"`
}

// NewInfoPushDataArticle instantiates a new InfoPushDataArticle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoPushDataArticle() *InfoPushDataArticle {
	this := InfoPushDataArticle{}
	return &this
}

// NewInfoPushDataArticleWithDefaults instantiates a new InfoPushDataArticle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoPushDataArticleWithDefaults() *InfoPushDataArticle {
	this := InfoPushDataArticle{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *InfoPushDataArticle) GetContent() InfoPushDataArticleContent {
	if o == nil || isNil(o.Content) {
		var ret InfoPushDataArticleContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoPushDataArticle) GetContentOk() (*InfoPushDataArticleContent, bool) {
	if o == nil || isNil(o.Content) {
    return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *InfoPushDataArticle) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given InfoPushDataArticleContent and assigns it to the Content field.
func (o *InfoPushDataArticle) SetContent(v InfoPushDataArticleContent) {
	o.Content = &v
}

func (o InfoPushDataArticle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableInfoPushDataArticle struct {
	value *InfoPushDataArticle
	isSet bool
}

func (v NullableInfoPushDataArticle) Get() *InfoPushDataArticle {
	return v.value
}

func (v *NullableInfoPushDataArticle) Set(val *InfoPushDataArticle) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoPushDataArticle) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoPushDataArticle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoPushDataArticle(val *InfoPushDataArticle) *NullableInfoPushDataArticle {
	return &NullableInfoPushDataArticle{value: val, isSet: true}
}

func (v NullableInfoPushDataArticle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoPushDataArticle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


