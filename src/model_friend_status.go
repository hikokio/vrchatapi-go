/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// FriendStatus struct for FriendStatus
type FriendStatus struct {
	IncomingRequest bool `json:"incomingRequest"`
	IsFriend bool `json:"isFriend"`
	OutgoingRequest bool `json:"outgoingRequest"`
}

// NewFriendStatus instantiates a new FriendStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFriendStatus(incomingRequest bool, isFriend bool, outgoingRequest bool) *FriendStatus {
	this := FriendStatus{}
	this.IncomingRequest = incomingRequest
	this.IsFriend = isFriend
	this.OutgoingRequest = outgoingRequest
	return &this
}

// NewFriendStatusWithDefaults instantiates a new FriendStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFriendStatusWithDefaults() *FriendStatus {
	this := FriendStatus{}
	var incomingRequest bool = false
	this.IncomingRequest = incomingRequest
	var isFriend bool = false
	this.IsFriend = isFriend
	var outgoingRequest bool = false
	this.OutgoingRequest = outgoingRequest
	return &this
}

// GetIncomingRequest returns the IncomingRequest field value
func (o *FriendStatus) GetIncomingRequest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncomingRequest
}

// GetIncomingRequestOk returns a tuple with the IncomingRequest field value
// and a boolean to check if the value has been set.
func (o *FriendStatus) GetIncomingRequestOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IncomingRequest, true
}

// SetIncomingRequest sets field value
func (o *FriendStatus) SetIncomingRequest(v bool) {
	o.IncomingRequest = v
}

// GetIsFriend returns the IsFriend field value
func (o *FriendStatus) GetIsFriend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFriend
}

// GetIsFriendOk returns a tuple with the IsFriend field value
// and a boolean to check if the value has been set.
func (o *FriendStatus) GetIsFriendOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsFriend, true
}

// SetIsFriend sets field value
func (o *FriendStatus) SetIsFriend(v bool) {
	o.IsFriend = v
}

// GetOutgoingRequest returns the OutgoingRequest field value
func (o *FriendStatus) GetOutgoingRequest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OutgoingRequest
}

// GetOutgoingRequestOk returns a tuple with the OutgoingRequest field value
// and a boolean to check if the value has been set.
func (o *FriendStatus) GetOutgoingRequestOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OutgoingRequest, true
}

// SetOutgoingRequest sets field value
func (o *FriendStatus) SetOutgoingRequest(v bool) {
	o.OutgoingRequest = v
}

func (o FriendStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["incomingRequest"] = o.IncomingRequest
	}
	if true {
		toSerialize["isFriend"] = o.IsFriend
	}
	if true {
		toSerialize["outgoingRequest"] = o.OutgoingRequest
	}
	return json.Marshal(toSerialize)
}

type NullableFriendStatus struct {
	value *FriendStatus
	isSet bool
}

func (v NullableFriendStatus) Get() *FriendStatus {
	return v.value
}

func (v *NullableFriendStatus) Set(val *FriendStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFriendStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFriendStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFriendStatus(val *FriendStatus) *NullableFriendStatus {
	return &NullableFriendStatus{value: val, isSet: true}
}

func (v NullableFriendStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFriendStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


