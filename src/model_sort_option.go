/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// SortOption the model 'SortOption'
type SortOption string

// List of SortOption
const (
	SORTOPTION_POPULARITY SortOption = "popularity"
	SORTOPTION_HEAT SortOption = "heat"
	SORTOPTION_TRUST SortOption = "trust"
	SORTOPTION_SHUFFLE SortOption = "shuffle"
	SORTOPTION_RANDOM SortOption = "random"
	SORTOPTION_FAVORITES SortOption = "favorites"
	SORTOPTION_REPORT_SCORE SortOption = "reportScore"
	SORTOPTION_REPORT_COUNT SortOption = "reportCount"
	SORTOPTION_PUBLICATION_DATE SortOption = "publicationDate"
	SORTOPTION_LABS_PUBLICATION_DATE SortOption = "labsPublicationDate"
	SORTOPTION_CREATED SortOption = "created"
	SORTOPTION_CREATED_AT SortOption = "_created_at"
	SORTOPTION_UPDATED SortOption = "updated"
	SORTOPTION_UPDATED_AT SortOption = "_updated_at"
	SORTOPTION_ORDER SortOption = "order"
	SORTOPTION_RELEVANCE SortOption = "relevance"
	SORTOPTION_MAGIC SortOption = "magic"
	SORTOPTION_NAME SortOption = "name"
)

// All allowed values of SortOption enum
var AllowedSortOptionEnumValues = []SortOption{
	"popularity",
	"heat",
	"trust",
	"shuffle",
	"random",
	"favorites",
	"reportScore",
	"reportCount",
	"publicationDate",
	"labsPublicationDate",
	"created",
	"_created_at",
	"updated",
	"_updated_at",
	"order",
	"relevance",
	"magic",
	"name",
}

func (v *SortOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortOption(value)
	for _, existing := range AllowedSortOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortOption", value)
}

// NewSortOptionFromValue returns a pointer to a valid SortOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortOptionFromValue(v string) (*SortOption, error) {
	ev := SortOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortOption: valid values are %v", v, AllowedSortOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortOption) IsValid() bool {
	for _, existing := range AllowedSortOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortOption value
func (v SortOption) Ptr() *SortOption {
	return &v
}

type NullableSortOption struct {
	value *SortOption
	isSet bool
}

func (v NullableSortOption) Get() *SortOption {
	return v.value
}

func (v *NullableSortOption) Set(val *SortOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSortOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSortOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortOption(val *SortOption) *NullableSortOption {
	return &NullableSortOption{value: val, isSet: true}
}

func (v NullableSortOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

