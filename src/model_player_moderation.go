/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// PlayerModeration struct for PlayerModeration
type PlayerModeration struct {
	Created time.Time `json:"created"`
	Id string `json:"id"`
	SourceDisplayName string `json:"sourceDisplayName"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	SourceUserId string `json:"sourceUserId"`
	TargetDisplayName string `json:"targetDisplayName"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	TargetUserId string `json:"targetUserId"`
	Type PlayerModerationType `json:"type"`
}

// NewPlayerModeration instantiates a new PlayerModeration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerModeration(created time.Time, id string, sourceDisplayName string, sourceUserId string, targetDisplayName string, targetUserId string, type_ PlayerModerationType) *PlayerModeration {
	this := PlayerModeration{}
	this.Created = created
	this.Id = id
	this.SourceDisplayName = sourceDisplayName
	this.SourceUserId = sourceUserId
	this.TargetDisplayName = targetDisplayName
	this.TargetUserId = targetUserId
	this.Type = type_
	return &this
}

// NewPlayerModerationWithDefaults instantiates a new PlayerModeration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerModerationWithDefaults() *PlayerModeration {
	this := PlayerModeration{}
	var type_ PlayerModerationType = PLAYERMODERATIONTYPE_UNMUTE
	this.Type = type_
	return &this
}

// GetCreated returns the Created field value
func (o *PlayerModeration) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *PlayerModeration) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *PlayerModeration) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlayerModeration) SetId(v string) {
	o.Id = v
}

// GetSourceDisplayName returns the SourceDisplayName field value
func (o *PlayerModeration) GetSourceDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDisplayName
}

// GetSourceDisplayNameOk returns a tuple with the SourceDisplayName field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetSourceDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SourceDisplayName, true
}

// SetSourceDisplayName sets field value
func (o *PlayerModeration) SetSourceDisplayName(v string) {
	o.SourceDisplayName = v
}

// GetSourceUserId returns the SourceUserId field value
func (o *PlayerModeration) GetSourceUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceUserId
}

// GetSourceUserIdOk returns a tuple with the SourceUserId field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetSourceUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SourceUserId, true
}

// SetSourceUserId sets field value
func (o *PlayerModeration) SetSourceUserId(v string) {
	o.SourceUserId = v
}

// GetTargetDisplayName returns the TargetDisplayName field value
func (o *PlayerModeration) GetTargetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetDisplayName
}

// GetTargetDisplayNameOk returns a tuple with the TargetDisplayName field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetTargetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TargetDisplayName, true
}

// SetTargetDisplayName sets field value
func (o *PlayerModeration) SetTargetDisplayName(v string) {
	o.TargetDisplayName = v
}

// GetTargetUserId returns the TargetUserId field value
func (o *PlayerModeration) GetTargetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUserId
}

// GetTargetUserIdOk returns a tuple with the TargetUserId field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetTargetUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TargetUserId, true
}

// SetTargetUserId sets field value
func (o *PlayerModeration) SetTargetUserId(v string) {
	o.TargetUserId = v
}

// GetType returns the Type field value
func (o *PlayerModeration) GetType() PlayerModerationType {
	if o == nil {
		var ret PlayerModerationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PlayerModeration) GetTypeOk() (*PlayerModerationType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PlayerModeration) SetType(v PlayerModerationType) {
	o.Type = v
}

func (o PlayerModeration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["sourceDisplayName"] = o.SourceDisplayName
	}
	if true {
		toSerialize["sourceUserId"] = o.SourceUserId
	}
	if true {
		toSerialize["targetDisplayName"] = o.TargetDisplayName
	}
	if true {
		toSerialize["targetUserId"] = o.TargetUserId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePlayerModeration struct {
	value *PlayerModeration
	isSet bool
}

func (v NullablePlayerModeration) Get() *PlayerModeration {
	return v.value
}

func (v *NullablePlayerModeration) Set(val *PlayerModeration) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerModeration) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerModeration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerModeration(val *PlayerModeration) *NullablePlayerModeration {
	return &NullablePlayerModeration{value: val, isSet: true}
}

func (v NullablePlayerModeration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerModeration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


