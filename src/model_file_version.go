/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// FileVersion 
type FileVersion struct {
	CreatedAt time.Time `json:"created_at"`
	// Usually only present if `true`
	Deleted *bool `json:"deleted,omitempty"`
	Delta *FileData `json:"delta,omitempty"`
	File *FileData `json:"file,omitempty"`
	Signature *FileData `json:"signature,omitempty"`
	Status FileStatus `json:"status"`
	// Incremental version counter, can only be increased.
	Version int32 `json:"version"`
}

// NewFileVersion instantiates a new FileVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileVersion(createdAt time.Time, status FileStatus, version int32) *FileVersion {
	this := FileVersion{}
	this.CreatedAt = createdAt
	var deleted bool = true
	this.Deleted = &deleted
	this.Status = status
	this.Version = version
	return &this
}

// NewFileVersionWithDefaults instantiates a new FileVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileVersionWithDefaults() *FileVersion {
	this := FileVersion{}
	var deleted bool = true
	this.Deleted = &deleted
	var status FileStatus = FILESTATUS_WAITING
	this.Status = status
	var version int32 = 0
	this.Version = version
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *FileVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FileVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FileVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *FileVersion) GetDeleted() bool {
	if o == nil || isNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersion) GetDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.Deleted) {
    return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *FileVersion) HasDeleted() bool {
	if o != nil && !isNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *FileVersion) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDelta returns the Delta field value if set, zero value otherwise.
func (o *FileVersion) GetDelta() FileData {
	if o == nil || isNil(o.Delta) {
		var ret FileData
		return ret
	}
	return *o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersion) GetDeltaOk() (*FileData, bool) {
	if o == nil || isNil(o.Delta) {
    return nil, false
	}
	return o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *FileVersion) HasDelta() bool {
	if o != nil && !isNil(o.Delta) {
		return true
	}

	return false
}

// SetDelta gets a reference to the given FileData and assigns it to the Delta field.
func (o *FileVersion) SetDelta(v FileData) {
	o.Delta = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *FileVersion) GetFile() FileData {
	if o == nil || isNil(o.File) {
		var ret FileData
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersion) GetFileOk() (*FileData, bool) {
	if o == nil || isNil(o.File) {
    return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *FileVersion) HasFile() bool {
	if o != nil && !isNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given FileData and assigns it to the File field.
func (o *FileVersion) SetFile(v FileData) {
	o.File = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *FileVersion) GetSignature() FileData {
	if o == nil || isNil(o.Signature) {
		var ret FileData
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileVersion) GetSignatureOk() (*FileData, bool) {
	if o == nil || isNil(o.Signature) {
    return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *FileVersion) HasSignature() bool {
	if o != nil && !isNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given FileData and assigns it to the Signature field.
func (o *FileVersion) SetSignature(v FileData) {
	o.Signature = &v
}

// GetStatus returns the Status field value
func (o *FileVersion) GetStatus() FileStatus {
	if o == nil {
		var ret FileStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FileVersion) GetStatusOk() (*FileStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FileVersion) SetStatus(v FileStatus) {
	o.Status = v
}

// GetVersion returns the Version field value
func (o *FileVersion) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FileVersion) GetVersionOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FileVersion) SetVersion(v int32) {
	o.Version = v
}

func (o FileVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !isNil(o.Delta) {
		toSerialize["delta"] = o.Delta
	}
	if !isNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !isNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableFileVersion struct {
	value *FileVersion
	isSet bool
}

func (v NullableFileVersion) Get() *FileVersion {
	return v.value
}

func (v *NullableFileVersion) Set(val *FileVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableFileVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableFileVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileVersion(val *FileVersion) *NullableFileVersion {
	return &NullableFileVersion{value: val, isSet: true}
}

func (v NullableFileVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


