/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// CurrentUser struct for CurrentUser
type CurrentUser struct {
	AcceptedTOSVersion int32 `json:"acceptedTOSVersion"`
	AccountDeletionDate NullableString `json:"accountDeletionDate,omitempty"`
	//  
	AccountDeletionLog []AccountDeletionLog `json:"accountDeletionLog,omitempty"`
	//  
	ActiveFriends []string `json:"activeFriends,omitempty"`
	AllowAvatarCopying bool `json:"allowAvatarCopying"`
	Bio string `json:"bio"`
	//  
	BioLinks []string `json:"bioLinks"`
	CurrentAvatar string `json:"currentAvatar"`
	CurrentAvatarAssetUrl string `json:"currentAvatarAssetUrl"`
	// When profilePicOverride is not empty, use it instead.
	CurrentAvatarImageUrl string `json:"currentAvatarImageUrl"`
	// When profilePicOverride is not empty, use it instead.
	CurrentAvatarThumbnailImageUrl string `json:"currentAvatarThumbnailImageUrl"`
	DateJoined string `json:"date_joined"`
	DeveloperType DeveloperType `json:"developerType"`
	DisplayName string `json:"displayName"`
	EmailVerified bool `json:"emailVerified"`
	FallbackAvatar *string `json:"fallbackAvatar,omitempty"`
	// Always empty array.
	// Deprecated
	FriendGroupNames []string `json:"friendGroupNames"`
	FriendKey string `json:"friendKey"`
	Friends []string `json:"friends"`
	HasBirthday bool `json:"hasBirthday"`
	HasEmail bool `json:"hasEmail"`
	HasLoggedInFromClient bool `json:"hasLoggedInFromClient"`
	HasPendingEmail bool `json:"hasPendingEmail"`
	// WorldID be \"offline\" on User profiles if you are not friends with that user.
	HomeLocation string `json:"homeLocation"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	Id string `json:"id"`
	IsFriend bool `json:"isFriend"`
	LastLogin time.Time `json:"last_login"`
	// This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.
	LastPlatform string `json:"last_platform"`
	ObfuscatedEmail string `json:"obfuscatedEmail"`
	ObfuscatedPendingEmail string `json:"obfuscatedPendingEmail"`
	OculusId string `json:"oculusId"`
	OfflineFriends []string `json:"offlineFriends,omitempty"`
	OnlineFriends []string `json:"onlineFriends,omitempty"`
	//  
	PastDisplayNames []PastDisplayName `json:"pastDisplayNames"`
	ProfilePicOverride string `json:"profilePicOverride"`
	State UserState `json:"state"`
	Status UserStatus `json:"status"`
	StatusDescription string `json:"statusDescription"`
	StatusFirstTime bool `json:"statusFirstTime"`
	StatusHistory []string `json:"statusHistory"`
	SteamDetails map[string]interface{} `json:"steamDetails"`
	SteamId string `json:"steamId"`
	Tags []string `json:"tags"`
	TwoFactorAuthEnabled bool `json:"twoFactorAuthEnabled"`
	TwoFactorAuthEnabledDate NullableTime `json:"twoFactorAuthEnabledDate,omitempty"`
	Unsubscribe bool `json:"unsubscribe"`
	UserIcon string `json:"userIcon"`
	// -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
	// Deprecated
	Username *string `json:"username,omitempty"`
}

// NewCurrentUser instantiates a new CurrentUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentUser(acceptedTOSVersion int32, allowAvatarCopying bool, bio string, bioLinks []string, currentAvatar string, currentAvatarAssetUrl string, currentAvatarImageUrl string, currentAvatarThumbnailImageUrl string, dateJoined string, developerType DeveloperType, displayName string, emailVerified bool, friendGroupNames []string, friendKey string, friends []string, hasBirthday bool, hasEmail bool, hasLoggedInFromClient bool, hasPendingEmail bool, homeLocation string, id string, isFriend bool, lastLogin time.Time, lastPlatform string, obfuscatedEmail string, obfuscatedPendingEmail string, oculusId string, pastDisplayNames []PastDisplayName, profilePicOverride string, state UserState, status UserStatus, statusDescription string, statusFirstTime bool, statusHistory []string, steamDetails map[string]interface{}, steamId string, tags []string, twoFactorAuthEnabled bool, unsubscribe bool, userIcon string) *CurrentUser {
	this := CurrentUser{}
	this.AcceptedTOSVersion = acceptedTOSVersion
	this.AllowAvatarCopying = allowAvatarCopying
	this.Bio = bio
	this.BioLinks = bioLinks
	this.CurrentAvatar = currentAvatar
	this.CurrentAvatarAssetUrl = currentAvatarAssetUrl
	this.CurrentAvatarImageUrl = currentAvatarImageUrl
	this.CurrentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl
	this.DateJoined = dateJoined
	this.DeveloperType = developerType
	this.DisplayName = displayName
	this.EmailVerified = emailVerified
	this.FriendGroupNames = friendGroupNames
	this.FriendKey = friendKey
	this.Friends = friends
	this.HasBirthday = hasBirthday
	this.HasEmail = hasEmail
	this.HasLoggedInFromClient = hasLoggedInFromClient
	this.HasPendingEmail = hasPendingEmail
	this.HomeLocation = homeLocation
	this.Id = id
	this.IsFriend = isFriend
	this.LastLogin = lastLogin
	this.LastPlatform = lastPlatform
	this.ObfuscatedEmail = obfuscatedEmail
	this.ObfuscatedPendingEmail = obfuscatedPendingEmail
	this.OculusId = oculusId
	this.PastDisplayNames = pastDisplayNames
	this.ProfilePicOverride = profilePicOverride
	this.State = state
	this.Status = status
	this.StatusDescription = statusDescription
	this.StatusFirstTime = statusFirstTime
	this.StatusHistory = statusHistory
	this.SteamDetails = steamDetails
	this.SteamId = steamId
	this.Tags = tags
	this.TwoFactorAuthEnabled = twoFactorAuthEnabled
	this.Unsubscribe = unsubscribe
	this.UserIcon = userIcon
	return &this
}

// NewCurrentUserWithDefaults instantiates a new CurrentUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentUserWithDefaults() *CurrentUser {
	this := CurrentUser{}
	var developerType DeveloperType = DEVELOPERTYPE_NONE
	this.DeveloperType = developerType
	var isFriend bool = false
	this.IsFriend = isFriend
	var state UserState = USERSTATE_OFFLINE
	this.State = state
	var status UserStatus = USERSTATUS_OFFLINE
	this.Status = status
	return &this
}

// GetAcceptedTOSVersion returns the AcceptedTOSVersion field value
func (o *CurrentUser) GetAcceptedTOSVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AcceptedTOSVersion
}

// GetAcceptedTOSVersionOk returns a tuple with the AcceptedTOSVersion field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetAcceptedTOSVersionOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AcceptedTOSVersion, true
}

// SetAcceptedTOSVersion sets field value
func (o *CurrentUser) SetAcceptedTOSVersion(v int32) {
	o.AcceptedTOSVersion = v
}

// GetAccountDeletionDate returns the AccountDeletionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetAccountDeletionDate() string {
	if o == nil || isNil(o.AccountDeletionDate.Get()) {
		var ret string
		return ret
	}
	return *o.AccountDeletionDate.Get()
}

// GetAccountDeletionDateOk returns a tuple with the AccountDeletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetAccountDeletionDateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AccountDeletionDate.Get(), o.AccountDeletionDate.IsSet()
}

// HasAccountDeletionDate returns a boolean if a field has been set.
func (o *CurrentUser) HasAccountDeletionDate() bool {
	if o != nil && o.AccountDeletionDate.IsSet() {
		return true
	}

	return false
}

// SetAccountDeletionDate gets a reference to the given NullableString and assigns it to the AccountDeletionDate field.
func (o *CurrentUser) SetAccountDeletionDate(v string) {
	o.AccountDeletionDate.Set(&v)
}
// SetAccountDeletionDateNil sets the value for AccountDeletionDate to be an explicit nil
func (o *CurrentUser) SetAccountDeletionDateNil() {
	o.AccountDeletionDate.Set(nil)
}

// UnsetAccountDeletionDate ensures that no value is present for AccountDeletionDate, not even an explicit nil
func (o *CurrentUser) UnsetAccountDeletionDate() {
	o.AccountDeletionDate.Unset()
}

// GetAccountDeletionLog returns the AccountDeletionLog field value if set, zero value otherwise.
func (o *CurrentUser) GetAccountDeletionLog() []AccountDeletionLog {
	if o == nil || isNil(o.AccountDeletionLog) {
		var ret []AccountDeletionLog
		return ret
	}
	return o.AccountDeletionLog
}

// GetAccountDeletionLogOk returns a tuple with the AccountDeletionLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetAccountDeletionLogOk() ([]AccountDeletionLog, bool) {
	if o == nil || isNil(o.AccountDeletionLog) {
    return nil, false
	}
	return o.AccountDeletionLog, true
}

// HasAccountDeletionLog returns a boolean if a field has been set.
func (o *CurrentUser) HasAccountDeletionLog() bool {
	if o != nil && !isNil(o.AccountDeletionLog) {
		return true
	}

	return false
}

// SetAccountDeletionLog gets a reference to the given []AccountDeletionLog and assigns it to the AccountDeletionLog field.
func (o *CurrentUser) SetAccountDeletionLog(v []AccountDeletionLog) {
	o.AccountDeletionLog = v
}

// GetActiveFriends returns the ActiveFriends field value if set, zero value otherwise.
func (o *CurrentUser) GetActiveFriends() []string {
	if o == nil || isNil(o.ActiveFriends) {
		var ret []string
		return ret
	}
	return o.ActiveFriends
}

// GetActiveFriendsOk returns a tuple with the ActiveFriends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetActiveFriendsOk() ([]string, bool) {
	if o == nil || isNil(o.ActiveFriends) {
    return nil, false
	}
	return o.ActiveFriends, true
}

// HasActiveFriends returns a boolean if a field has been set.
func (o *CurrentUser) HasActiveFriends() bool {
	if o != nil && !isNil(o.ActiveFriends) {
		return true
	}

	return false
}

// SetActiveFriends gets a reference to the given []string and assigns it to the ActiveFriends field.
func (o *CurrentUser) SetActiveFriends(v []string) {
	o.ActiveFriends = v
}

// GetAllowAvatarCopying returns the AllowAvatarCopying field value
func (o *CurrentUser) GetAllowAvatarCopying() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowAvatarCopying
}

// GetAllowAvatarCopyingOk returns a tuple with the AllowAvatarCopying field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetAllowAvatarCopyingOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AllowAvatarCopying, true
}

// SetAllowAvatarCopying sets field value
func (o *CurrentUser) SetAllowAvatarCopying(v bool) {
	o.AllowAvatarCopying = v
}

// GetBio returns the Bio field value
func (o *CurrentUser) GetBio() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bio
}

// GetBioOk returns a tuple with the Bio field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetBioOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Bio, true
}

// SetBio sets field value
func (o *CurrentUser) SetBio(v string) {
	o.Bio = v
}

// GetBioLinks returns the BioLinks field value
func (o *CurrentUser) GetBioLinks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BioLinks
}

// GetBioLinksOk returns a tuple with the BioLinks field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetBioLinksOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BioLinks, true
}

// SetBioLinks sets field value
func (o *CurrentUser) SetBioLinks(v []string) {
	o.BioLinks = v
}

// GetCurrentAvatar returns the CurrentAvatar field value
func (o *CurrentUser) GetCurrentAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatar
}

// GetCurrentAvatarOk returns a tuple with the CurrentAvatar field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetCurrentAvatarOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatar, true
}

// SetCurrentAvatar sets field value
func (o *CurrentUser) SetCurrentAvatar(v string) {
	o.CurrentAvatar = v
}

// GetCurrentAvatarAssetUrl returns the CurrentAvatarAssetUrl field value
func (o *CurrentUser) GetCurrentAvatarAssetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatarAssetUrl
}

// GetCurrentAvatarAssetUrlOk returns a tuple with the CurrentAvatarAssetUrl field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetCurrentAvatarAssetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatarAssetUrl, true
}

// SetCurrentAvatarAssetUrl sets field value
func (o *CurrentUser) SetCurrentAvatarAssetUrl(v string) {
	o.CurrentAvatarAssetUrl = v
}

// GetCurrentAvatarImageUrl returns the CurrentAvatarImageUrl field value
func (o *CurrentUser) GetCurrentAvatarImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatarImageUrl
}

// GetCurrentAvatarImageUrlOk returns a tuple with the CurrentAvatarImageUrl field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetCurrentAvatarImageUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatarImageUrl, true
}

// SetCurrentAvatarImageUrl sets field value
func (o *CurrentUser) SetCurrentAvatarImageUrl(v string) {
	o.CurrentAvatarImageUrl = v
}

// GetCurrentAvatarThumbnailImageUrl returns the CurrentAvatarThumbnailImageUrl field value
func (o *CurrentUser) GetCurrentAvatarThumbnailImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentAvatarThumbnailImageUrl
}

// GetCurrentAvatarThumbnailImageUrlOk returns a tuple with the CurrentAvatarThumbnailImageUrl field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetCurrentAvatarThumbnailImageUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CurrentAvatarThumbnailImageUrl, true
}

// SetCurrentAvatarThumbnailImageUrl sets field value
func (o *CurrentUser) SetCurrentAvatarThumbnailImageUrl(v string) {
	o.CurrentAvatarThumbnailImageUrl = v
}

// GetDateJoined returns the DateJoined field value
func (o *CurrentUser) GetDateJoined() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateJoined
}

// GetDateJoinedOk returns a tuple with the DateJoined field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetDateJoinedOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DateJoined, true
}

// SetDateJoined sets field value
func (o *CurrentUser) SetDateJoined(v string) {
	o.DateJoined = v
}

// GetDeveloperType returns the DeveloperType field value
func (o *CurrentUser) GetDeveloperType() DeveloperType {
	if o == nil {
		var ret DeveloperType
		return ret
	}

	return o.DeveloperType
}

// GetDeveloperTypeOk returns a tuple with the DeveloperType field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetDeveloperTypeOk() (*DeveloperType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeveloperType, true
}

// SetDeveloperType sets field value
func (o *CurrentUser) SetDeveloperType(v DeveloperType) {
	o.DeveloperType = v
}

// GetDisplayName returns the DisplayName field value
func (o *CurrentUser) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetDisplayNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CurrentUser) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmailVerified returns the EmailVerified field value
func (o *CurrentUser) GetEmailVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EmailVerified, true
}

// SetEmailVerified sets field value
func (o *CurrentUser) SetEmailVerified(v bool) {
	o.EmailVerified = v
}

// GetFallbackAvatar returns the FallbackAvatar field value if set, zero value otherwise.
func (o *CurrentUser) GetFallbackAvatar() string {
	if o == nil || isNil(o.FallbackAvatar) {
		var ret string
		return ret
	}
	return *o.FallbackAvatar
}

// GetFallbackAvatarOk returns a tuple with the FallbackAvatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetFallbackAvatarOk() (*string, bool) {
	if o == nil || isNil(o.FallbackAvatar) {
    return nil, false
	}
	return o.FallbackAvatar, true
}

// HasFallbackAvatar returns a boolean if a field has been set.
func (o *CurrentUser) HasFallbackAvatar() bool {
	if o != nil && !isNil(o.FallbackAvatar) {
		return true
	}

	return false
}

// SetFallbackAvatar gets a reference to the given string and assigns it to the FallbackAvatar field.
func (o *CurrentUser) SetFallbackAvatar(v string) {
	o.FallbackAvatar = &v
}

// GetFriendGroupNames returns the FriendGroupNames field value
// Deprecated
func (o *CurrentUser) GetFriendGroupNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FriendGroupNames
}

// GetFriendGroupNamesOk returns a tuple with the FriendGroupNames field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *CurrentUser) GetFriendGroupNamesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FriendGroupNames, true
}

// SetFriendGroupNames sets field value
// Deprecated
func (o *CurrentUser) SetFriendGroupNames(v []string) {
	o.FriendGroupNames = v
}

// GetFriendKey returns the FriendKey field value
func (o *CurrentUser) GetFriendKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FriendKey
}

// GetFriendKeyOk returns a tuple with the FriendKey field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetFriendKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FriendKey, true
}

// SetFriendKey sets field value
func (o *CurrentUser) SetFriendKey(v string) {
	o.FriendKey = v
}

// GetFriends returns the Friends field value
func (o *CurrentUser) GetFriends() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Friends
}

// GetFriendsOk returns a tuple with the Friends field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetFriendsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Friends, true
}

// SetFriends sets field value
func (o *CurrentUser) SetFriends(v []string) {
	o.Friends = v
}

// GetHasBirthday returns the HasBirthday field value
func (o *CurrentUser) GetHasBirthday() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasBirthday
}

// GetHasBirthdayOk returns a tuple with the HasBirthday field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetHasBirthdayOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HasBirthday, true
}

// SetHasBirthday sets field value
func (o *CurrentUser) SetHasBirthday(v bool) {
	o.HasBirthday = v
}

// GetHasEmail returns the HasEmail field value
func (o *CurrentUser) GetHasEmail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasEmail
}

// GetHasEmailOk returns a tuple with the HasEmail field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetHasEmailOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HasEmail, true
}

// SetHasEmail sets field value
func (o *CurrentUser) SetHasEmail(v bool) {
	o.HasEmail = v
}

// GetHasLoggedInFromClient returns the HasLoggedInFromClient field value
func (o *CurrentUser) GetHasLoggedInFromClient() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasLoggedInFromClient
}

// GetHasLoggedInFromClientOk returns a tuple with the HasLoggedInFromClient field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetHasLoggedInFromClientOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HasLoggedInFromClient, true
}

// SetHasLoggedInFromClient sets field value
func (o *CurrentUser) SetHasLoggedInFromClient(v bool) {
	o.HasLoggedInFromClient = v
}

// GetHasPendingEmail returns the HasPendingEmail field value
func (o *CurrentUser) GetHasPendingEmail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPendingEmail
}

// GetHasPendingEmailOk returns a tuple with the HasPendingEmail field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetHasPendingEmailOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HasPendingEmail, true
}

// SetHasPendingEmail sets field value
func (o *CurrentUser) SetHasPendingEmail(v bool) {
	o.HasPendingEmail = v
}

// GetHomeLocation returns the HomeLocation field value
func (o *CurrentUser) GetHomeLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HomeLocation
}

// GetHomeLocationOk returns a tuple with the HomeLocation field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetHomeLocationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HomeLocation, true
}

// SetHomeLocation sets field value
func (o *CurrentUser) SetHomeLocation(v string) {
	o.HomeLocation = v
}

// GetId returns the Id field value
func (o *CurrentUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CurrentUser) SetId(v string) {
	o.Id = v
}

// GetIsFriend returns the IsFriend field value
func (o *CurrentUser) GetIsFriend() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFriend
}

// GetIsFriendOk returns a tuple with the IsFriend field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetIsFriendOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsFriend, true
}

// SetIsFriend sets field value
func (o *CurrentUser) SetIsFriend(v bool) {
	o.IsFriend = v
}

// GetLastLogin returns the LastLogin field value
func (o *CurrentUser) GetLastLogin() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastLogin, true
}

// SetLastLogin sets field value
func (o *CurrentUser) SetLastLogin(v time.Time) {
	o.LastLogin = v
}

// GetLastPlatform returns the LastPlatform field value
func (o *CurrentUser) GetLastPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastPlatform
}

// GetLastPlatformOk returns a tuple with the LastPlatform field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetLastPlatformOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastPlatform, true
}

// SetLastPlatform sets field value
func (o *CurrentUser) SetLastPlatform(v string) {
	o.LastPlatform = v
}

// GetObfuscatedEmail returns the ObfuscatedEmail field value
func (o *CurrentUser) GetObfuscatedEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObfuscatedEmail
}

// GetObfuscatedEmailOk returns a tuple with the ObfuscatedEmail field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetObfuscatedEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ObfuscatedEmail, true
}

// SetObfuscatedEmail sets field value
func (o *CurrentUser) SetObfuscatedEmail(v string) {
	o.ObfuscatedEmail = v
}

// GetObfuscatedPendingEmail returns the ObfuscatedPendingEmail field value
func (o *CurrentUser) GetObfuscatedPendingEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObfuscatedPendingEmail
}

// GetObfuscatedPendingEmailOk returns a tuple with the ObfuscatedPendingEmail field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetObfuscatedPendingEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ObfuscatedPendingEmail, true
}

// SetObfuscatedPendingEmail sets field value
func (o *CurrentUser) SetObfuscatedPendingEmail(v string) {
	o.ObfuscatedPendingEmail = v
}

// GetOculusId returns the OculusId field value
func (o *CurrentUser) GetOculusId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OculusId
}

// GetOculusIdOk returns a tuple with the OculusId field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetOculusIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OculusId, true
}

// SetOculusId sets field value
func (o *CurrentUser) SetOculusId(v string) {
	o.OculusId = v
}

// GetOfflineFriends returns the OfflineFriends field value if set, zero value otherwise.
func (o *CurrentUser) GetOfflineFriends() []string {
	if o == nil || isNil(o.OfflineFriends) {
		var ret []string
		return ret
	}
	return o.OfflineFriends
}

// GetOfflineFriendsOk returns a tuple with the OfflineFriends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetOfflineFriendsOk() ([]string, bool) {
	if o == nil || isNil(o.OfflineFriends) {
    return nil, false
	}
	return o.OfflineFriends, true
}

// HasOfflineFriends returns a boolean if a field has been set.
func (o *CurrentUser) HasOfflineFriends() bool {
	if o != nil && !isNil(o.OfflineFriends) {
		return true
	}

	return false
}

// SetOfflineFriends gets a reference to the given []string and assigns it to the OfflineFriends field.
func (o *CurrentUser) SetOfflineFriends(v []string) {
	o.OfflineFriends = v
}

// GetOnlineFriends returns the OnlineFriends field value if set, zero value otherwise.
func (o *CurrentUser) GetOnlineFriends() []string {
	if o == nil || isNil(o.OnlineFriends) {
		var ret []string
		return ret
	}
	return o.OnlineFriends
}

// GetOnlineFriendsOk returns a tuple with the OnlineFriends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetOnlineFriendsOk() ([]string, bool) {
	if o == nil || isNil(o.OnlineFriends) {
    return nil, false
	}
	return o.OnlineFriends, true
}

// HasOnlineFriends returns a boolean if a field has been set.
func (o *CurrentUser) HasOnlineFriends() bool {
	if o != nil && !isNil(o.OnlineFriends) {
		return true
	}

	return false
}

// SetOnlineFriends gets a reference to the given []string and assigns it to the OnlineFriends field.
func (o *CurrentUser) SetOnlineFriends(v []string) {
	o.OnlineFriends = v
}

// GetPastDisplayNames returns the PastDisplayNames field value
func (o *CurrentUser) GetPastDisplayNames() []PastDisplayName {
	if o == nil {
		var ret []PastDisplayName
		return ret
	}

	return o.PastDisplayNames
}

// GetPastDisplayNamesOk returns a tuple with the PastDisplayNames field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetPastDisplayNamesOk() ([]PastDisplayName, bool) {
	if o == nil {
    return nil, false
	}
	return o.PastDisplayNames, true
}

// SetPastDisplayNames sets field value
func (o *CurrentUser) SetPastDisplayNames(v []PastDisplayName) {
	o.PastDisplayNames = v
}

// GetProfilePicOverride returns the ProfilePicOverride field value
func (o *CurrentUser) GetProfilePicOverride() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfilePicOverride
}

// GetProfilePicOverrideOk returns a tuple with the ProfilePicOverride field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetProfilePicOverrideOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProfilePicOverride, true
}

// SetProfilePicOverride sets field value
func (o *CurrentUser) SetProfilePicOverride(v string) {
	o.ProfilePicOverride = v
}

// GetState returns the State field value
func (o *CurrentUser) GetState() UserState {
	if o == nil {
		var ret UserState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetStateOk() (*UserState, bool) {
	if o == nil {
    return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CurrentUser) SetState(v UserState) {
	o.State = v
}

// GetStatus returns the Status field value
func (o *CurrentUser) GetStatus() UserStatus {
	if o == nil {
		var ret UserStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetStatusOk() (*UserStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CurrentUser) SetStatus(v UserStatus) {
	o.Status = v
}

// GetStatusDescription returns the StatusDescription field value
func (o *CurrentUser) GetStatusDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetStatusDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StatusDescription, true
}

// SetStatusDescription sets field value
func (o *CurrentUser) SetStatusDescription(v string) {
	o.StatusDescription = v
}

// GetStatusFirstTime returns the StatusFirstTime field value
func (o *CurrentUser) GetStatusFirstTime() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StatusFirstTime
}

// GetStatusFirstTimeOk returns a tuple with the StatusFirstTime field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetStatusFirstTimeOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StatusFirstTime, true
}

// SetStatusFirstTime sets field value
func (o *CurrentUser) SetStatusFirstTime(v bool) {
	o.StatusFirstTime = v
}

// GetStatusHistory returns the StatusHistory field value
func (o *CurrentUser) GetStatusHistory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StatusHistory
}

// GetStatusHistoryOk returns a tuple with the StatusHistory field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetStatusHistoryOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.StatusHistory, true
}

// SetStatusHistory sets field value
func (o *CurrentUser) SetStatusHistory(v []string) {
	o.StatusHistory = v
}

// GetSteamDetails returns the SteamDetails field value
func (o *CurrentUser) GetSteamDetails() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.SteamDetails
}

// GetSteamDetailsOk returns a tuple with the SteamDetails field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetSteamDetailsOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.SteamDetails, true
}

// SetSteamDetails sets field value
func (o *CurrentUser) SetSteamDetails(v map[string]interface{}) {
	o.SteamDetails = v
}

// GetSteamId returns the SteamId field value
func (o *CurrentUser) GetSteamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SteamId
}

// GetSteamIdOk returns a tuple with the SteamId field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetSteamIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SteamId, true
}

// SetSteamId sets field value
func (o *CurrentUser) SetSteamId(v string) {
	o.SteamId = v
}

// GetTags returns the Tags field value
func (o *CurrentUser) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetTagsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *CurrentUser) SetTags(v []string) {
	o.Tags = v
}

// GetTwoFactorAuthEnabled returns the TwoFactorAuthEnabled field value
func (o *CurrentUser) GetTwoFactorAuthEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TwoFactorAuthEnabled
}

// GetTwoFactorAuthEnabledOk returns a tuple with the TwoFactorAuthEnabled field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetTwoFactorAuthEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TwoFactorAuthEnabled, true
}

// SetTwoFactorAuthEnabled sets field value
func (o *CurrentUser) SetTwoFactorAuthEnabled(v bool) {
	o.TwoFactorAuthEnabled = v
}

// GetTwoFactorAuthEnabledDate returns the TwoFactorAuthEnabledDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetTwoFactorAuthEnabledDate() time.Time {
	if o == nil || isNil(o.TwoFactorAuthEnabledDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TwoFactorAuthEnabledDate.Get()
}

// GetTwoFactorAuthEnabledDateOk returns a tuple with the TwoFactorAuthEnabledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetTwoFactorAuthEnabledDateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.TwoFactorAuthEnabledDate.Get(), o.TwoFactorAuthEnabledDate.IsSet()
}

// HasTwoFactorAuthEnabledDate returns a boolean if a field has been set.
func (o *CurrentUser) HasTwoFactorAuthEnabledDate() bool {
	if o != nil && o.TwoFactorAuthEnabledDate.IsSet() {
		return true
	}

	return false
}

// SetTwoFactorAuthEnabledDate gets a reference to the given NullableTime and assigns it to the TwoFactorAuthEnabledDate field.
func (o *CurrentUser) SetTwoFactorAuthEnabledDate(v time.Time) {
	o.TwoFactorAuthEnabledDate.Set(&v)
}
// SetTwoFactorAuthEnabledDateNil sets the value for TwoFactorAuthEnabledDate to be an explicit nil
func (o *CurrentUser) SetTwoFactorAuthEnabledDateNil() {
	o.TwoFactorAuthEnabledDate.Set(nil)
}

// UnsetTwoFactorAuthEnabledDate ensures that no value is present for TwoFactorAuthEnabledDate, not even an explicit nil
func (o *CurrentUser) UnsetTwoFactorAuthEnabledDate() {
	o.TwoFactorAuthEnabledDate.Unset()
}

// GetUnsubscribe returns the Unsubscribe field value
func (o *CurrentUser) GetUnsubscribe() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Unsubscribe
}

// GetUnsubscribeOk returns a tuple with the Unsubscribe field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetUnsubscribeOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Unsubscribe, true
}

// SetUnsubscribe sets field value
func (o *CurrentUser) SetUnsubscribe(v bool) {
	o.Unsubscribe = v
}

// GetUserIcon returns the UserIcon field value
func (o *CurrentUser) GetUserIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserIcon
}

// GetUserIconOk returns a tuple with the UserIcon field value
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetUserIconOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UserIcon, true
}

// SetUserIcon sets field value
func (o *CurrentUser) SetUserIcon(v string) {
	o.UserIcon = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
// Deprecated
func (o *CurrentUser) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CurrentUser) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CurrentUser) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
// Deprecated
func (o *CurrentUser) SetUsername(v string) {
	o.Username = &v
}

func (o CurrentUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["acceptedTOSVersion"] = o.AcceptedTOSVersion
	}
	if o.AccountDeletionDate.IsSet() {
		toSerialize["accountDeletionDate"] = o.AccountDeletionDate.Get()
	}
	if !isNil(o.AccountDeletionLog) {
		toSerialize["accountDeletionLog"] = o.AccountDeletionLog
	}
	if !isNil(o.ActiveFriends) {
		toSerialize["activeFriends"] = o.ActiveFriends
	}
	if true {
		toSerialize["allowAvatarCopying"] = o.AllowAvatarCopying
	}
	if true {
		toSerialize["bio"] = o.Bio
	}
	if true {
		toSerialize["bioLinks"] = o.BioLinks
	}
	if true {
		toSerialize["currentAvatar"] = o.CurrentAvatar
	}
	if true {
		toSerialize["currentAvatarAssetUrl"] = o.CurrentAvatarAssetUrl
	}
	if true {
		toSerialize["currentAvatarImageUrl"] = o.CurrentAvatarImageUrl
	}
	if true {
		toSerialize["currentAvatarThumbnailImageUrl"] = o.CurrentAvatarThumbnailImageUrl
	}
	if true {
		toSerialize["date_joined"] = o.DateJoined
	}
	if true {
		toSerialize["developerType"] = o.DeveloperType
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !isNil(o.FallbackAvatar) {
		toSerialize["fallbackAvatar"] = o.FallbackAvatar
	}
	if true {
		toSerialize["friendGroupNames"] = o.FriendGroupNames
	}
	if true {
		toSerialize["friendKey"] = o.FriendKey
	}
	if true {
		toSerialize["friends"] = o.Friends
	}
	if true {
		toSerialize["hasBirthday"] = o.HasBirthday
	}
	if true {
		toSerialize["hasEmail"] = o.HasEmail
	}
	if true {
		toSerialize["hasLoggedInFromClient"] = o.HasLoggedInFromClient
	}
	if true {
		toSerialize["hasPendingEmail"] = o.HasPendingEmail
	}
	if true {
		toSerialize["homeLocation"] = o.HomeLocation
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["isFriend"] = o.IsFriend
	}
	if true {
		toSerialize["last_login"] = o.LastLogin
	}
	if true {
		toSerialize["last_platform"] = o.LastPlatform
	}
	if true {
		toSerialize["obfuscatedEmail"] = o.ObfuscatedEmail
	}
	if true {
		toSerialize["obfuscatedPendingEmail"] = o.ObfuscatedPendingEmail
	}
	if true {
		toSerialize["oculusId"] = o.OculusId
	}
	if !isNil(o.OfflineFriends) {
		toSerialize["offlineFriends"] = o.OfflineFriends
	}
	if !isNil(o.OnlineFriends) {
		toSerialize["onlineFriends"] = o.OnlineFriends
	}
	if true {
		toSerialize["pastDisplayNames"] = o.PastDisplayNames
	}
	if true {
		toSerialize["profilePicOverride"] = o.ProfilePicOverride
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if true {
		toSerialize["statusFirstTime"] = o.StatusFirstTime
	}
	if true {
		toSerialize["statusHistory"] = o.StatusHistory
	}
	if true {
		toSerialize["steamDetails"] = o.SteamDetails
	}
	if true {
		toSerialize["steamId"] = o.SteamId
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["twoFactorAuthEnabled"] = o.TwoFactorAuthEnabled
	}
	if o.TwoFactorAuthEnabledDate.IsSet() {
		toSerialize["twoFactorAuthEnabledDate"] = o.TwoFactorAuthEnabledDate.Get()
	}
	if true {
		toSerialize["unsubscribe"] = o.Unsubscribe
	}
	if true {
		toSerialize["userIcon"] = o.UserIcon
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableCurrentUser struct {
	value *CurrentUser
	isSet bool
}

func (v NullableCurrentUser) Get() *CurrentUser {
	return v.value
}

func (v *NullableCurrentUser) Set(val *CurrentUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentUser(val *CurrentUser) *NullableCurrentUser {
	return &NullableCurrentUser{value: val, isSet: true}
}

func (v NullableCurrentUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


