/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// TransactionSteamWalletInfo 
type TransactionSteamWalletInfo struct {
	State string `json:"state"`
	Country string `json:"country"`
	Currency string `json:"currency"`
	Status string `json:"status"`
}

// NewTransactionSteamWalletInfo instantiates a new TransactionSteamWalletInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSteamWalletInfo(state string, country string, currency string, status string) *TransactionSteamWalletInfo {
	this := TransactionSteamWalletInfo{}
	this.State = state
	this.Country = country
	this.Currency = currency
	this.Status = status
	return &this
}

// NewTransactionSteamWalletInfoWithDefaults instantiates a new TransactionSteamWalletInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSteamWalletInfoWithDefaults() *TransactionSteamWalletInfo {
	this := TransactionSteamWalletInfo{}
	var country string = "US"
	this.Country = country
	var currency string = "USD"
	this.Currency = currency
	return &this
}

// GetState returns the State field value
func (o *TransactionSteamWalletInfo) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *TransactionSteamWalletInfo) GetStateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *TransactionSteamWalletInfo) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *TransactionSteamWalletInfo) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *TransactionSteamWalletInfo) GetCountryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *TransactionSteamWalletInfo) SetCountry(v string) {
	o.Country = v
}

// GetCurrency returns the Currency field value
func (o *TransactionSteamWalletInfo) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransactionSteamWalletInfo) GetCurrencyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransactionSteamWalletInfo) SetCurrency(v string) {
	o.Currency = v
}

// GetStatus returns the Status field value
func (o *TransactionSteamWalletInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransactionSteamWalletInfo) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactionSteamWalletInfo) SetStatus(v string) {
	o.Status = v
}

func (o TransactionSteamWalletInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionSteamWalletInfo struct {
	value *TransactionSteamWalletInfo
	isSet bool
}

func (v NullableTransactionSteamWalletInfo) Get() *TransactionSteamWalletInfo {
	return v.value
}

func (v *NullableTransactionSteamWalletInfo) Set(val *TransactionSteamWalletInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSteamWalletInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSteamWalletInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSteamWalletInfo(val *TransactionSteamWalletInfo) *NullableTransactionSteamWalletInfo {
	return &NullableTransactionSteamWalletInfo{value: val, isSet: true}
}

func (v NullableTransactionSteamWalletInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSteamWalletInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


