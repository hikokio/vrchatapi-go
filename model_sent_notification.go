/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// SentNotification 
type SentNotification struct {
	CreatedAt time.Time `json:"created_at"`
	// **NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.
	Details string `json:"details"`
	Id string `json:"id"`
	// 
	Message string `json:"message"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	RecieverUserId string `json:"recieverUserId"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	SenderUserId string `json:"senderUserId"`
	// -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
	// Deprecated
	SenderUsername *string `json:"senderUsername,omitempty"`
	Type NotificationType `json:"type"`
}

// NewSentNotification instantiates a new SentNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSentNotification(createdAt time.Time, details string, id string, message string, recieverUserId string, senderUserId string, type_ NotificationType) *SentNotification {
	this := SentNotification{}
	this.CreatedAt = createdAt
	this.Details = details
	this.Id = id
	this.Message = message
	this.RecieverUserId = recieverUserId
	this.SenderUserId = senderUserId
	this.Type = type_
	return &this
}

// NewSentNotificationWithDefaults instantiates a new SentNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSentNotificationWithDefaults() *SentNotification {
	this := SentNotification{}
	var details string = "{}"
	this.Details = details
	var type_ NotificationType = NOTIFICATIONTYPE_FRIEND_REQUEST
	this.Type = type_
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *SentNotification) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SentNotification) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDetails returns the Details field value
func (o *SentNotification) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetDetailsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *SentNotification) SetDetails(v string) {
	o.Details = v
}

// GetId returns the Id field value
func (o *SentNotification) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SentNotification) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *SentNotification) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SentNotification) SetMessage(v string) {
	o.Message = v
}

// GetRecieverUserId returns the RecieverUserId field value
func (o *SentNotification) GetRecieverUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecieverUserId
}

// GetRecieverUserIdOk returns a tuple with the RecieverUserId field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetRecieverUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RecieverUserId, true
}

// SetRecieverUserId sets field value
func (o *SentNotification) SetRecieverUserId(v string) {
	o.RecieverUserId = v
}

// GetSenderUserId returns the SenderUserId field value
func (o *SentNotification) GetSenderUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderUserId
}

// GetSenderUserIdOk returns a tuple with the SenderUserId field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetSenderUserIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SenderUserId, true
}

// SetSenderUserId sets field value
func (o *SentNotification) SetSenderUserId(v string) {
	o.SenderUserId = v
}

// GetSenderUsername returns the SenderUsername field value if set, zero value otherwise.
// Deprecated
func (o *SentNotification) GetSenderUsername() string {
	if o == nil || isNil(o.SenderUsername) {
		var ret string
		return ret
	}
	return *o.SenderUsername
}

// GetSenderUsernameOk returns a tuple with the SenderUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SentNotification) GetSenderUsernameOk() (*string, bool) {
	if o == nil || isNil(o.SenderUsername) {
    return nil, false
	}
	return o.SenderUsername, true
}

// HasSenderUsername returns a boolean if a field has been set.
func (o *SentNotification) HasSenderUsername() bool {
	if o != nil && !isNil(o.SenderUsername) {
		return true
	}

	return false
}

// SetSenderUsername gets a reference to the given string and assigns it to the SenderUsername field.
// Deprecated
func (o *SentNotification) SetSenderUsername(v string) {
	o.SenderUsername = &v
}

// GetType returns the Type field value
func (o *SentNotification) GetType() NotificationType {
	if o == nil {
		var ret NotificationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SentNotification) GetTypeOk() (*NotificationType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SentNotification) SetType(v NotificationType) {
	o.Type = v
}

func (o SentNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["details"] = o.Details
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["recieverUserId"] = o.RecieverUserId
	}
	if true {
		toSerialize["senderUserId"] = o.SenderUserId
	}
	if !isNil(o.SenderUsername) {
		toSerialize["senderUsername"] = o.SenderUsername
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSentNotification struct {
	value *SentNotification
	isSet bool
}

func (v NullableSentNotification) Get() *SentNotification {
	return v.value
}

func (v *NullableSentNotification) Set(val *SentNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSentNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSentNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSentNotification(val *SentNotification) *NullableSentNotification {
	return &NullableSentNotification{value: val, isSet: true}
}

func (v NullableSentNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSentNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


