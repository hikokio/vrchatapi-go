/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"fmt"
)

// DeveloperType \"none\" User is a normal user \"trusted\" Unknown \"internal\" Is a VRChat Developer \"moderator\" Is a VRChat Moderator  Staff can hide their developerType at will.
type DeveloperType string

// List of DeveloperType
const (
	DEVELOPERTYPE_NONE DeveloperType = "none"
	DEVELOPERTYPE_TRUSTED DeveloperType = "trusted"
	DEVELOPERTYPE_INTERNAL DeveloperType = "internal"
	DEVELOPERTYPE_MODERATOR DeveloperType = "moderator"
)

// All allowed values of DeveloperType enum
var AllowedDeveloperTypeEnumValues = []DeveloperType{
	"none",
	"trusted",
	"internal",
	"moderator",
}

func (v *DeveloperType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeveloperType(value)
	for _, existing := range AllowedDeveloperTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeveloperType", value)
}

// NewDeveloperTypeFromValue returns a pointer to a valid DeveloperType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeveloperTypeFromValue(v string) (*DeveloperType, error) {
	ev := DeveloperType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeveloperType: valid values are %v", v, AllowedDeveloperTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeveloperType) IsValid() bool {
	for _, existing := range AllowedDeveloperTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeveloperType value
func (v DeveloperType) Ptr() *DeveloperType {
	return &v
}

type NullableDeveloperType struct {
	value *DeveloperType
	isSet bool
}

func (v NullableDeveloperType) Get() *DeveloperType {
	return v.value
}

func (v *NullableDeveloperType) Set(val *DeveloperType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeveloperType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeveloperType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeveloperType(val *DeveloperType) *NullableDeveloperType {
	return &NullableDeveloperType{value: val, isSet: true}
}

func (v NullableDeveloperType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeveloperType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

