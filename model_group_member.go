/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
	"time"
)

// GroupMember struct for GroupMember
type GroupMember struct {
	Id *string `json:"id,omitempty"`
	GroupId *string `json:"groupId,omitempty"`
	// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
	UserId *string `json:"userId,omitempty"`
	// Whether the user is representing the group. This makes the group show up above the name tag in-game.
	IsRepresenting *bool `json:"isRepresenting,omitempty"`
	User *GroupMemberLimitedUser `json:"user,omitempty"`
	RoleIds []string `json:"roleIds,omitempty"`
	JoinedAt *time.Time `json:"joinedAt,omitempty"`
	MembershipStatus *string `json:"membershipStatus,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	IsSubscribedToAnnouncements *bool `json:"isSubscribedToAnnouncements,omitempty"`
	// Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
	CreatedAt NullableTime `json:"createdAt,omitempty"`
	// Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
	BannedAt NullableTime `json:"bannedAt,omitempty"`
	// Only visible via the /groups/:groupId/members endpoint, **not** when fetching a specific user.
	ManagerNotes NullableString `json:"managerNotes,omitempty"`
}

// NewGroupMember instantiates a new GroupMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupMember() *GroupMember {
	this := GroupMember{}
	var isRepresenting bool = false
	this.IsRepresenting = &isRepresenting
	var isSubscribedToAnnouncements bool = false
	this.IsSubscribedToAnnouncements = &isSubscribedToAnnouncements
	return &this
}

// NewGroupMemberWithDefaults instantiates a new GroupMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupMemberWithDefaults() *GroupMember {
	this := GroupMember{}
	var isRepresenting bool = false
	this.IsRepresenting = &isRepresenting
	var isSubscribedToAnnouncements bool = false
	this.IsSubscribedToAnnouncements = &isSubscribedToAnnouncements
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupMember) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupMember) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupMember) SetId(v string) {
	o.Id = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GroupMember) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GroupMember) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *GroupMember) SetGroupId(v string) {
	o.GroupId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *GroupMember) GetUserId() string {
	if o == nil || isNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetUserIdOk() (*string, bool) {
	if o == nil || isNil(o.UserId) {
    return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *GroupMember) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *GroupMember) SetUserId(v string) {
	o.UserId = &v
}

// GetIsRepresenting returns the IsRepresenting field value if set, zero value otherwise.
func (o *GroupMember) GetIsRepresenting() bool {
	if o == nil || isNil(o.IsRepresenting) {
		var ret bool
		return ret
	}
	return *o.IsRepresenting
}

// GetIsRepresentingOk returns a tuple with the IsRepresenting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetIsRepresentingOk() (*bool, bool) {
	if o == nil || isNil(o.IsRepresenting) {
    return nil, false
	}
	return o.IsRepresenting, true
}

// HasIsRepresenting returns a boolean if a field has been set.
func (o *GroupMember) HasIsRepresenting() bool {
	if o != nil && !isNil(o.IsRepresenting) {
		return true
	}

	return false
}

// SetIsRepresenting gets a reference to the given bool and assigns it to the IsRepresenting field.
func (o *GroupMember) SetIsRepresenting(v bool) {
	o.IsRepresenting = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *GroupMember) GetUser() GroupMemberLimitedUser {
	if o == nil || isNil(o.User) {
		var ret GroupMemberLimitedUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetUserOk() (*GroupMemberLimitedUser, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GroupMember) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given GroupMemberLimitedUser and assigns it to the User field.
func (o *GroupMember) SetUser(v GroupMemberLimitedUser) {
	o.User = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *GroupMember) GetRoleIds() []string {
	if o == nil || isNil(o.RoleIds) {
		var ret []string
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetRoleIdsOk() ([]string, bool) {
	if o == nil || isNil(o.RoleIds) {
    return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *GroupMember) HasRoleIds() bool {
	if o != nil && !isNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *GroupMember) SetRoleIds(v []string) {
	o.RoleIds = v
}

// GetJoinedAt returns the JoinedAt field value if set, zero value otherwise.
func (o *GroupMember) GetJoinedAt() time.Time {
	if o == nil || isNil(o.JoinedAt) {
		var ret time.Time
		return ret
	}
	return *o.JoinedAt
}

// GetJoinedAtOk returns a tuple with the JoinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetJoinedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.JoinedAt) {
    return nil, false
	}
	return o.JoinedAt, true
}

// HasJoinedAt returns a boolean if a field has been set.
func (o *GroupMember) HasJoinedAt() bool {
	if o != nil && !isNil(o.JoinedAt) {
		return true
	}

	return false
}

// SetJoinedAt gets a reference to the given time.Time and assigns it to the JoinedAt field.
func (o *GroupMember) SetJoinedAt(v time.Time) {
	o.JoinedAt = &v
}

// GetMembershipStatus returns the MembershipStatus field value if set, zero value otherwise.
func (o *GroupMember) GetMembershipStatus() string {
	if o == nil || isNil(o.MembershipStatus) {
		var ret string
		return ret
	}
	return *o.MembershipStatus
}

// GetMembershipStatusOk returns a tuple with the MembershipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetMembershipStatusOk() (*string, bool) {
	if o == nil || isNil(o.MembershipStatus) {
    return nil, false
	}
	return o.MembershipStatus, true
}

// HasMembershipStatus returns a boolean if a field has been set.
func (o *GroupMember) HasMembershipStatus() bool {
	if o != nil && !isNil(o.MembershipStatus) {
		return true
	}

	return false
}

// SetMembershipStatus gets a reference to the given string and assigns it to the MembershipStatus field.
func (o *GroupMember) SetMembershipStatus(v string) {
	o.MembershipStatus = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *GroupMember) GetVisibility() string {
	if o == nil || isNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetVisibilityOk() (*string, bool) {
	if o == nil || isNil(o.Visibility) {
    return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *GroupMember) HasVisibility() bool {
	if o != nil && !isNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *GroupMember) SetVisibility(v string) {
	o.Visibility = &v
}

// GetIsSubscribedToAnnouncements returns the IsSubscribedToAnnouncements field value if set, zero value otherwise.
func (o *GroupMember) GetIsSubscribedToAnnouncements() bool {
	if o == nil || isNil(o.IsSubscribedToAnnouncements) {
		var ret bool
		return ret
	}
	return *o.IsSubscribedToAnnouncements
}

// GetIsSubscribedToAnnouncementsOk returns a tuple with the IsSubscribedToAnnouncements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupMember) GetIsSubscribedToAnnouncementsOk() (*bool, bool) {
	if o == nil || isNil(o.IsSubscribedToAnnouncements) {
    return nil, false
	}
	return o.IsSubscribedToAnnouncements, true
}

// HasIsSubscribedToAnnouncements returns a boolean if a field has been set.
func (o *GroupMember) HasIsSubscribedToAnnouncements() bool {
	if o != nil && !isNil(o.IsSubscribedToAnnouncements) {
		return true
	}

	return false
}

// SetIsSubscribedToAnnouncements gets a reference to the given bool and assigns it to the IsSubscribedToAnnouncements field.
func (o *GroupMember) SetIsSubscribedToAnnouncements(v bool) {
	o.IsSubscribedToAnnouncements = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupMember) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupMember) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GroupMember) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *GroupMember) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *GroupMember) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *GroupMember) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetBannedAt returns the BannedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupMember) GetBannedAt() time.Time {
	if o == nil || isNil(o.BannedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.BannedAt.Get()
}

// GetBannedAtOk returns a tuple with the BannedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupMember) GetBannedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.BannedAt.Get(), o.BannedAt.IsSet()
}

// HasBannedAt returns a boolean if a field has been set.
func (o *GroupMember) HasBannedAt() bool {
	if o != nil && o.BannedAt.IsSet() {
		return true
	}

	return false
}

// SetBannedAt gets a reference to the given NullableTime and assigns it to the BannedAt field.
func (o *GroupMember) SetBannedAt(v time.Time) {
	o.BannedAt.Set(&v)
}
// SetBannedAtNil sets the value for BannedAt to be an explicit nil
func (o *GroupMember) SetBannedAtNil() {
	o.BannedAt.Set(nil)
}

// UnsetBannedAt ensures that no value is present for BannedAt, not even an explicit nil
func (o *GroupMember) UnsetBannedAt() {
	o.BannedAt.Unset()
}

// GetManagerNotes returns the ManagerNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupMember) GetManagerNotes() string {
	if o == nil || isNil(o.ManagerNotes.Get()) {
		var ret string
		return ret
	}
	return *o.ManagerNotes.Get()
}

// GetManagerNotesOk returns a tuple with the ManagerNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupMember) GetManagerNotesOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ManagerNotes.Get(), o.ManagerNotes.IsSet()
}

// HasManagerNotes returns a boolean if a field has been set.
func (o *GroupMember) HasManagerNotes() bool {
	if o != nil && o.ManagerNotes.IsSet() {
		return true
	}

	return false
}

// SetManagerNotes gets a reference to the given NullableString and assigns it to the ManagerNotes field.
func (o *GroupMember) SetManagerNotes(v string) {
	o.ManagerNotes.Set(&v)
}
// SetManagerNotesNil sets the value for ManagerNotes to be an explicit nil
func (o *GroupMember) SetManagerNotesNil() {
	o.ManagerNotes.Set(nil)
}

// UnsetManagerNotes ensures that no value is present for ManagerNotes, not even an explicit nil
func (o *GroupMember) UnsetManagerNotes() {
	o.ManagerNotes.Unset()
}

func (o GroupMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !isNil(o.IsRepresenting) {
		toSerialize["isRepresenting"] = o.IsRepresenting
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !isNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	if !isNil(o.JoinedAt) {
		toSerialize["joinedAt"] = o.JoinedAt
	}
	if !isNil(o.MembershipStatus) {
		toSerialize["membershipStatus"] = o.MembershipStatus
	}
	if !isNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !isNil(o.IsSubscribedToAnnouncements) {
		toSerialize["isSubscribedToAnnouncements"] = o.IsSubscribedToAnnouncements
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.BannedAt.IsSet() {
		toSerialize["bannedAt"] = o.BannedAt.Get()
	}
	if o.ManagerNotes.IsSet() {
		toSerialize["managerNotes"] = o.ManagerNotes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGroupMember struct {
	value *GroupMember
	isSet bool
}

func (v NullableGroupMember) Get() *GroupMember {
	return v.value
}

func (v *NullableGroupMember) Set(val *GroupMember) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupMember) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupMember(val *GroupMember) *NullableGroupMember {
	return &NullableGroupMember{value: val, isSet: true}
}

func (v NullableGroupMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


