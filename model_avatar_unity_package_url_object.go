/*
VRChat API Documentation


API version: 1.10.1
Contact: me@ariesclark.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vrchatapi

import (
	"encoding/json"
)

// AvatarUnityPackageUrlObject **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.
type AvatarUnityPackageUrlObject struct {
	UnityPackageUrl *string `json:"unityPackageUrl,omitempty"`
}

// NewAvatarUnityPackageUrlObject instantiates a new AvatarUnityPackageUrlObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvatarUnityPackageUrlObject() *AvatarUnityPackageUrlObject {
	this := AvatarUnityPackageUrlObject{}
	return &this
}

// NewAvatarUnityPackageUrlObjectWithDefaults instantiates a new AvatarUnityPackageUrlObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvatarUnityPackageUrlObjectWithDefaults() *AvatarUnityPackageUrlObject {
	this := AvatarUnityPackageUrlObject{}
	return &this
}

// GetUnityPackageUrl returns the UnityPackageUrl field value if set, zero value otherwise.
func (o *AvatarUnityPackageUrlObject) GetUnityPackageUrl() string {
	if o == nil || isNil(o.UnityPackageUrl) {
		var ret string
		return ret
	}
	return *o.UnityPackageUrl
}

// GetUnityPackageUrlOk returns a tuple with the UnityPackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvatarUnityPackageUrlObject) GetUnityPackageUrlOk() (*string, bool) {
	if o == nil || isNil(o.UnityPackageUrl) {
    return nil, false
	}
	return o.UnityPackageUrl, true
}

// HasUnityPackageUrl returns a boolean if a field has been set.
func (o *AvatarUnityPackageUrlObject) HasUnityPackageUrl() bool {
	if o != nil && !isNil(o.UnityPackageUrl) {
		return true
	}

	return false
}

// SetUnityPackageUrl gets a reference to the given string and assigns it to the UnityPackageUrl field.
func (o *AvatarUnityPackageUrlObject) SetUnityPackageUrl(v string) {
	o.UnityPackageUrl = &v
}

func (o AvatarUnityPackageUrlObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UnityPackageUrl) {
		toSerialize["unityPackageUrl"] = o.UnityPackageUrl
	}
	return json.Marshal(toSerialize)
}

type NullableAvatarUnityPackageUrlObject struct {
	value *AvatarUnityPackageUrlObject
	isSet bool
}

func (v NullableAvatarUnityPackageUrlObject) Get() *AvatarUnityPackageUrlObject {
	return v.value
}

func (v *NullableAvatarUnityPackageUrlObject) Set(val *AvatarUnityPackageUrlObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAvatarUnityPackageUrlObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAvatarUnityPackageUrlObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvatarUnityPackageUrlObject(val *AvatarUnityPackageUrlObject) *NullableAvatarUnityPackageUrlObject {
	return &NullableAvatarUnityPackageUrlObject{value: val, isSet: true}
}

func (v NullableAvatarUnityPackageUrlObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvatarUnityPackageUrlObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


